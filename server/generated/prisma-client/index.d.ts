// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  board: (where?: BoardWhereInput) => Promise<boolean>;
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  image: (where?: ImageWhereInput) => Promise<boolean>;
  market: (where?: MarketWhereInput) => Promise<boolean>;
  notice: (where?: NoticeWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  rent: (where?: RentWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  board: (where: BoardWhereUniqueInput) => BoardNullablePromise;
  boards: (args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Board>;
  boardsConnection: (args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BoardConnectionPromise;
  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  image: (where: ImageWhereUniqueInput) => ImageNullablePromise;
  images: (args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Image>;
  imagesConnection: (args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ImageConnectionPromise;
  market: (where: MarketWhereUniqueInput) => MarketNullablePromise;
  markets: (args?: {
    where?: MarketWhereInput;
    orderBy?: MarketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Market>;
  marketsConnection: (args?: {
    where?: MarketWhereInput;
    orderBy?: MarketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MarketConnectionPromise;
  notice: (where: NoticeWhereUniqueInput) => NoticeNullablePromise;
  notices: (args?: {
    where?: NoticeWhereInput;
    orderBy?: NoticeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Notice>;
  noticesConnection: (args?: {
    where?: NoticeWhereInput;
    orderBy?: NoticeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NoticeConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  rent: (where: RentWhereUniqueInput) => RentNullablePromise;
  rents: (args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Rent>;
  rentsConnection: (args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RentConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBoard: (data: BoardCreateInput) => BoardPromise;
  updateBoard: (args: {
    data: BoardUpdateInput;
    where: BoardWhereUniqueInput;
  }) => BoardPromise;
  updateManyBoards: (args: {
    data: BoardUpdateManyMutationInput;
    where?: BoardWhereInput;
  }) => BatchPayloadPromise;
  upsertBoard: (args: {
    where: BoardWhereUniqueInput;
    create: BoardCreateInput;
    update: BoardUpdateInput;
  }) => BoardPromise;
  deleteBoard: (where: BoardWhereUniqueInput) => BoardPromise;
  deleteManyBoards: (where?: BoardWhereInput) => BatchPayloadPromise;
  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createImage: (data: ImageCreateInput) => ImagePromise;
  updateImage: (args: {
    data: ImageUpdateInput;
    where: ImageWhereUniqueInput;
  }) => ImagePromise;
  updateManyImages: (args: {
    data: ImageUpdateManyMutationInput;
    where?: ImageWhereInput;
  }) => BatchPayloadPromise;
  upsertImage: (args: {
    where: ImageWhereUniqueInput;
    create: ImageCreateInput;
    update: ImageUpdateInput;
  }) => ImagePromise;
  deleteImage: (where: ImageWhereUniqueInput) => ImagePromise;
  deleteManyImages: (where?: ImageWhereInput) => BatchPayloadPromise;
  createMarket: (data: MarketCreateInput) => MarketPromise;
  updateMarket: (args: {
    data: MarketUpdateInput;
    where: MarketWhereUniqueInput;
  }) => MarketPromise;
  updateManyMarkets: (args: {
    data: MarketUpdateManyMutationInput;
    where?: MarketWhereInput;
  }) => BatchPayloadPromise;
  upsertMarket: (args: {
    where: MarketWhereUniqueInput;
    create: MarketCreateInput;
    update: MarketUpdateInput;
  }) => MarketPromise;
  deleteMarket: (where: MarketWhereUniqueInput) => MarketPromise;
  deleteManyMarkets: (where?: MarketWhereInput) => BatchPayloadPromise;
  createNotice: (data: NoticeCreateInput) => NoticePromise;
  updateNotice: (args: {
    data: NoticeUpdateInput;
    where: NoticeWhereUniqueInput;
  }) => NoticePromise;
  updateManyNotices: (args: {
    data: NoticeUpdateManyMutationInput;
    where?: NoticeWhereInput;
  }) => BatchPayloadPromise;
  upsertNotice: (args: {
    where: NoticeWhereUniqueInput;
    create: NoticeCreateInput;
    update: NoticeUpdateInput;
  }) => NoticePromise;
  deleteNotice: (where: NoticeWhereUniqueInput) => NoticePromise;
  deleteManyNotices: (where?: NoticeWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createRent: (data: RentCreateInput) => RentPromise;
  updateRent: (args: {
    data: RentUpdateInput;
    where: RentWhereUniqueInput;
  }) => RentPromise;
  updateManyRents: (args: {
    data: RentUpdateManyMutationInput;
    where?: RentWhereInput;
  }) => BatchPayloadPromise;
  upsertRent: (args: {
    where: RentWhereUniqueInput;
    create: RentCreateInput;
    update: RentUpdateInput;
  }) => RentPromise;
  deleteRent: (where: RentWhereUniqueInput) => RentPromise;
  deleteManyRents: (where?: RentWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  board: (
    where?: BoardSubscriptionWhereInput
  ) => BoardSubscriptionPayloadSubscription;
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  image: (
    where?: ImageSubscriptionWhereInput
  ) => ImageSubscriptionPayloadSubscription;
  market: (
    where?: MarketSubscriptionWhereInput
  ) => MarketSubscriptionPayloadSubscription;
  notice: (
    where?: NoticeSubscriptionWhereInput
  ) => NoticeSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  rent: (
    where?: RentSubscriptionWhereInput
  ) => RentSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NoticeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "caption_ASC"
  | "caption_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MarketOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "caption_ASC"
  | "caption_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type BoardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "caption_ASC"
  | "caption_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "caption_ASC"
  | "caption_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ImageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "email_ASC"
  | "email_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "username_ASC"
  | "username_DESC"
  | "intro_ASC"
  | "intro_DESC"
  | "loginSecret_ASC"
  | "loginSecret_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type BoardWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  notices_every?: Maybe<NoticeWhereInput>;
  notices_some?: Maybe<NoticeWhereInput>;
  notices_none?: Maybe<NoticeWhereInput>;
  markgets_every?: Maybe<MarketWhereInput>;
  markgets_some?: Maybe<MarketWhereInput>;
  markgets_none?: Maybe<MarketWhereInput>;
  boards_every?: Maybe<BoardWhereInput>;
  boards_some?: Maybe<BoardWhereInput>;
  boards_none?: Maybe<BoardWhereInput>;
  rents_every?: Maybe<RentWhereInput>;
  rents_some?: Maybe<RentWhereInput>;
  rents_none?: Maybe<RentWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  intro?: Maybe<String>;
  intro_not?: Maybe<String>;
  intro_in?: Maybe<String[] | String>;
  intro_not_in?: Maybe<String[] | String>;
  intro_lt?: Maybe<String>;
  intro_lte?: Maybe<String>;
  intro_gt?: Maybe<String>;
  intro_gte?: Maybe<String>;
  intro_contains?: Maybe<String>;
  intro_not_contains?: Maybe<String>;
  intro_starts_with?: Maybe<String>;
  intro_not_starts_with?: Maybe<String>;
  intro_ends_with?: Maybe<String>;
  intro_not_ends_with?: Maybe<String>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  boards_every?: Maybe<BoardWhereInput>;
  boards_some?: Maybe<BoardWhereInput>;
  boards_none?: Maybe<BoardWhereInput>;
  markets_every?: Maybe<MarketWhereInput>;
  markets_some?: Maybe<MarketWhereInput>;
  markets_none?: Maybe<MarketWhereInput>;
  rents_every?: Maybe<RentWhereInput>;
  rents_some?: Maybe<RentWhereInput>;
  rents_none?: Maybe<RentWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  loginSecret?: Maybe<String>;
  loginSecret_not?: Maybe<String>;
  loginSecret_in?: Maybe<String[] | String>;
  loginSecret_not_in?: Maybe<String[] | String>;
  loginSecret_lt?: Maybe<String>;
  loginSecret_lte?: Maybe<String>;
  loginSecret_gt?: Maybe<String>;
  loginSecret_gte?: Maybe<String>;
  loginSecret_contains?: Maybe<String>;
  loginSecret_not_contains?: Maybe<String>;
  loginSecret_starts_with?: Maybe<String>;
  loginSecret_not_starts_with?: Maybe<String>;
  loginSecret_ends_with?: Maybe<String>;
  loginSecret_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface BoardWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BoardWhereInput[] | BoardWhereInput>;
  OR?: Maybe<BoardWhereInput[] | BoardWhereInput>;
  NOT?: Maybe<BoardWhereInput[] | BoardWhereInput>;
}

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  board?: Maybe<BoardWhereInput>;
  market?: Maybe<MarketWhereInput>;
  rent?: Maybe<RentWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export interface MarketWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MarketWhereInput[] | MarketWhereInput>;
  OR?: Maybe<MarketWhereInput[] | MarketWhereInput>;
  NOT?: Maybe<MarketWhereInput[] | MarketWhereInput>;
}

export interface RentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RentWhereInput[] | RentWhereInput>;
  OR?: Maybe<RentWhereInput[] | RentWhereInput>;
  NOT?: Maybe<RentWhereInput[] | RentWhereInput>;
}

export interface NoticeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<NoticeWhereInput[] | NoticeWhereInput>;
  OR?: Maybe<NoticeWhereInput[] | NoticeWhereInput>;
  NOT?: Maybe<NoticeWhereInput[] | NoticeWhereInput>;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ImageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ImageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ImageWhereInput[] | ImageWhereInput>;
  OR?: Maybe<ImageWhereInput[] | ImageWhereInput>;
  NOT?: Maybe<ImageWhereInput[] | ImageWhereInput>;
}

export type MarketWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type NoticeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type RentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  username?: Maybe<String>;
}>;

export interface BoardCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutBoardsInput;
  title: String;
  caption: String;
  comments?: Maybe<CommentCreateManyWithoutBoardInput>;
}

export interface UserCreateOneWithoutBoardsInput {
  create?: Maybe<UserCreateWithoutBoardsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutBoardsInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  email: String;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username: String;
  intro?: Maybe<String>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  markets?: Maybe<MarketCreateManyWithoutUserInput>;
  rents?: Maybe<RentCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface PostCreateManyWithoutUserInput {
  create?: Maybe<PostCreateWithoutUserInput[] | PostCreateWithoutUserInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  notices?: Maybe<NoticeCreateManyInput>;
  markgets?: Maybe<MarketCreateManyInput>;
  boards?: Maybe<BoardCreateManyInput>;
  rents?: Maybe<RentCreateManyInput>;
}

export interface NoticeCreateManyInput {
  create?: Maybe<NoticeCreateInput[] | NoticeCreateInput>;
  connect?: Maybe<NoticeWhereUniqueInput[] | NoticeWhereUniqueInput>;
}

export interface NoticeCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  title: String;
  caption: String;
  comments?: Maybe<CommentCreateManyInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  email: String;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username: String;
  intro?: Maybe<String>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  boards?: Maybe<BoardCreateManyWithoutUserInput>;
  markets?: Maybe<MarketCreateManyWithoutUserInput>;
  rents?: Maybe<RentCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface BoardCreateManyWithoutUserInput {
  create?: Maybe<BoardCreateWithoutUserInput[] | BoardCreateWithoutUserInput>;
  connect?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
}

export interface BoardCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  title: String;
  caption: String;
  comments?: Maybe<CommentCreateManyWithoutBoardInput>;
}

export interface CommentCreateManyWithoutBoardInput {
  create?: Maybe<
    CommentCreateWithoutBoardInput[] | CommentCreateWithoutBoardInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutBoardInput {
  id?: Maybe<ID_Input>;
  text: String;
  user?: Maybe<UserCreateOneWithoutCommentsInput>;
  market?: Maybe<MarketCreateOneWithoutCommentsInput>;
  rent?: Maybe<RentCreateOneWithoutCommentsInput>;
}

export interface UserCreateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  email: String;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username: String;
  intro?: Maybe<String>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  boards?: Maybe<BoardCreateManyWithoutUserInput>;
  markets?: Maybe<MarketCreateManyWithoutUserInput>;
  rents?: Maybe<RentCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface MarketCreateManyWithoutUserInput {
  create?: Maybe<MarketCreateWithoutUserInput[] | MarketCreateWithoutUserInput>;
  connect?: Maybe<MarketWhereUniqueInput[] | MarketWhereUniqueInput>;
}

export interface MarketCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  title: String;
  caption: String;
  comments?: Maybe<CommentCreateManyWithoutMarketInput>;
}

export interface CommentCreateManyWithoutMarketInput {
  create?: Maybe<
    CommentCreateWithoutMarketInput[] | CommentCreateWithoutMarketInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutMarketInput {
  id?: Maybe<ID_Input>;
  text: String;
  user?: Maybe<UserCreateOneWithoutCommentsInput>;
  board?: Maybe<BoardCreateOneWithoutCommentsInput>;
  rent?: Maybe<RentCreateOneWithoutCommentsInput>;
}

export interface BoardCreateOneWithoutCommentsInput {
  create?: Maybe<BoardCreateWithoutCommentsInput>;
  connect?: Maybe<BoardWhereUniqueInput>;
}

export interface BoardCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutBoardsInput;
  title: String;
  caption: String;
}

export interface RentCreateOneWithoutCommentsInput {
  create?: Maybe<RentCreateWithoutCommentsInput>;
  connect?: Maybe<RentWhereUniqueInput>;
}

export interface RentCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutRentsInput;
  title: String;
  caption: String;
}

export interface UserCreateOneWithoutRentsInput {
  create?: Maybe<UserCreateWithoutRentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutRentsInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  email: String;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username: String;
  intro?: Maybe<String>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  boards?: Maybe<BoardCreateManyWithoutUserInput>;
  markets?: Maybe<MarketCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface CommentCreateManyWithoutUserInput {
  create?: Maybe<
    CommentCreateWithoutUserInput[] | CommentCreateWithoutUserInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  text: String;
  board?: Maybe<BoardCreateOneWithoutCommentsInput>;
  market?: Maybe<MarketCreateOneWithoutCommentsInput>;
  rent?: Maybe<RentCreateOneWithoutCommentsInput>;
}

export interface MarketCreateOneWithoutCommentsInput {
  create?: Maybe<MarketCreateWithoutCommentsInput>;
  connect?: Maybe<MarketWhereUniqueInput>;
}

export interface MarketCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutMarketsInput;
  title: String;
  caption: String;
}

export interface UserCreateOneWithoutMarketsInput {
  create?: Maybe<UserCreateWithoutMarketsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutMarketsInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  email: String;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username: String;
  intro?: Maybe<String>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  boards?: Maybe<BoardCreateManyWithoutUserInput>;
  rents?: Maybe<RentCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface RentCreateManyWithoutUserInput {
  create?: Maybe<RentCreateWithoutUserInput[] | RentCreateWithoutUserInput>;
  connect?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
}

export interface RentCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  title: String;
  caption: String;
  comments?: Maybe<CommentCreateManyWithoutRentInput>;
}

export interface CommentCreateManyWithoutRentInput {
  create?: Maybe<
    CommentCreateWithoutRentInput[] | CommentCreateWithoutRentInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutRentInput {
  id?: Maybe<ID_Input>;
  text: String;
  user?: Maybe<UserCreateOneWithoutCommentsInput>;
  board?: Maybe<BoardCreateOneWithoutCommentsInput>;
  market?: Maybe<MarketCreateOneWithoutCommentsInput>;
}

export interface CommentCreateManyInput {
  create?: Maybe<CommentCreateInput[] | CommentCreateInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  user?: Maybe<UserCreateOneWithoutCommentsInput>;
  board?: Maybe<BoardCreateOneWithoutCommentsInput>;
  market?: Maybe<MarketCreateOneWithoutCommentsInput>;
  rent?: Maybe<RentCreateOneWithoutCommentsInput>;
}

export interface MarketCreateManyInput {
  create?: Maybe<MarketCreateInput[] | MarketCreateInput>;
  connect?: Maybe<MarketWhereUniqueInput[] | MarketWhereUniqueInput>;
}

export interface MarketCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutMarketsInput;
  title: String;
  caption: String;
  comments?: Maybe<CommentCreateManyWithoutMarketInput>;
}

export interface BoardCreateManyInput {
  create?: Maybe<BoardCreateInput[] | BoardCreateInput>;
  connect?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
}

export interface RentCreateManyInput {
  create?: Maybe<RentCreateInput[] | RentCreateInput>;
  connect?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
}

export interface RentCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutRentsInput;
  title: String;
  caption: String;
  comments?: Maybe<CommentCreateManyWithoutRentInput>;
}

export interface BoardUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutBoardsInput>;
  title?: Maybe<String>;
  caption?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutBoardInput>;
}

export interface UserUpdateOneRequiredWithoutBoardsInput {
  create?: Maybe<UserCreateWithoutBoardsInput>;
  update?: Maybe<UserUpdateWithoutBoardsDataInput>;
  upsert?: Maybe<UserUpsertWithoutBoardsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutBoardsDataInput {
  avatar?: Maybe<String>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username?: Maybe<String>;
  intro?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  markets?: Maybe<MarketUpdateManyWithoutUserInput>;
  rents?: Maybe<RentUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface PostUpdateManyWithoutUserInput {
  create?: Maybe<PostCreateWithoutUserInput[] | PostCreateWithoutUserInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutUserInput[]
    | PostUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutUserInput[]
    | PostUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface PostUpdateWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutUserDataInput;
}

export interface PostUpdateWithoutUserDataInput {
  notices?: Maybe<NoticeUpdateManyInput>;
  markgets?: Maybe<MarketUpdateManyInput>;
  boards?: Maybe<BoardUpdateManyInput>;
  rents?: Maybe<RentUpdateManyInput>;
}

export interface NoticeUpdateManyInput {
  create?: Maybe<NoticeCreateInput[] | NoticeCreateInput>;
  update?: Maybe<
    | NoticeUpdateWithWhereUniqueNestedInput[]
    | NoticeUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | NoticeUpsertWithWhereUniqueNestedInput[]
    | NoticeUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<NoticeWhereUniqueInput[] | NoticeWhereUniqueInput>;
  connect?: Maybe<NoticeWhereUniqueInput[] | NoticeWhereUniqueInput>;
  set?: Maybe<NoticeWhereUniqueInput[] | NoticeWhereUniqueInput>;
  disconnect?: Maybe<NoticeWhereUniqueInput[] | NoticeWhereUniqueInput>;
  deleteMany?: Maybe<NoticeScalarWhereInput[] | NoticeScalarWhereInput>;
  updateMany?: Maybe<
    | NoticeUpdateManyWithWhereNestedInput[]
    | NoticeUpdateManyWithWhereNestedInput
  >;
}

export interface NoticeUpdateWithWhereUniqueNestedInput {
  where: NoticeWhereUniqueInput;
  data: NoticeUpdateDataInput;
}

export interface NoticeUpdateDataInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  title?: Maybe<String>;
  caption?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  avatar?: Maybe<String>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username?: Maybe<String>;
  intro?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  boards?: Maybe<BoardUpdateManyWithoutUserInput>;
  markets?: Maybe<MarketUpdateManyWithoutUserInput>;
  rents?: Maybe<RentUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface BoardUpdateManyWithoutUserInput {
  create?: Maybe<BoardCreateWithoutUserInput[] | BoardCreateWithoutUserInput>;
  delete?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  connect?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  set?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  disconnect?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  update?: Maybe<
    | BoardUpdateWithWhereUniqueWithoutUserInput[]
    | BoardUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | BoardUpsertWithWhereUniqueWithoutUserInput[]
    | BoardUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<BoardScalarWhereInput[] | BoardScalarWhereInput>;
  updateMany?: Maybe<
    BoardUpdateManyWithWhereNestedInput[] | BoardUpdateManyWithWhereNestedInput
  >;
}

export interface BoardUpdateWithWhereUniqueWithoutUserInput {
  where: BoardWhereUniqueInput;
  data: BoardUpdateWithoutUserDataInput;
}

export interface BoardUpdateWithoutUserDataInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutBoardInput>;
}

export interface CommentUpdateManyWithoutBoardInput {
  create?: Maybe<
    CommentCreateWithoutBoardInput[] | CommentCreateWithoutBoardInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutBoardInput[]
    | CommentUpdateWithWhereUniqueWithoutBoardInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutBoardInput[]
    | CommentUpsertWithWhereUniqueWithoutBoardInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutBoardInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutBoardDataInput;
}

export interface CommentUpdateWithoutBoardDataInput {
  text?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutCommentsInput>;
  market?: Maybe<MarketUpdateOneWithoutCommentsInput>;
  rent?: Maybe<RentUpdateOneWithoutCommentsInput>;
}

export interface UserUpdateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  update?: Maybe<UserUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCommentsDataInput {
  avatar?: Maybe<String>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username?: Maybe<String>;
  intro?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  boards?: Maybe<BoardUpdateManyWithoutUserInput>;
  markets?: Maybe<MarketUpdateManyWithoutUserInput>;
  rents?: Maybe<RentUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface MarketUpdateManyWithoutUserInput {
  create?: Maybe<MarketCreateWithoutUserInput[] | MarketCreateWithoutUserInput>;
  delete?: Maybe<MarketWhereUniqueInput[] | MarketWhereUniqueInput>;
  connect?: Maybe<MarketWhereUniqueInput[] | MarketWhereUniqueInput>;
  set?: Maybe<MarketWhereUniqueInput[] | MarketWhereUniqueInput>;
  disconnect?: Maybe<MarketWhereUniqueInput[] | MarketWhereUniqueInput>;
  update?: Maybe<
    | MarketUpdateWithWhereUniqueWithoutUserInput[]
    | MarketUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | MarketUpsertWithWhereUniqueWithoutUserInput[]
    | MarketUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<MarketScalarWhereInput[] | MarketScalarWhereInput>;
  updateMany?: Maybe<
    | MarketUpdateManyWithWhereNestedInput[]
    | MarketUpdateManyWithWhereNestedInput
  >;
}

export interface MarketUpdateWithWhereUniqueWithoutUserInput {
  where: MarketWhereUniqueInput;
  data: MarketUpdateWithoutUserDataInput;
}

export interface MarketUpdateWithoutUserDataInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutMarketInput>;
}

export interface CommentUpdateManyWithoutMarketInput {
  create?: Maybe<
    CommentCreateWithoutMarketInput[] | CommentCreateWithoutMarketInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutMarketInput[]
    | CommentUpdateWithWhereUniqueWithoutMarketInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutMarketInput[]
    | CommentUpsertWithWhereUniqueWithoutMarketInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutMarketInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutMarketDataInput;
}

export interface CommentUpdateWithoutMarketDataInput {
  text?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutCommentsInput>;
  board?: Maybe<BoardUpdateOneWithoutCommentsInput>;
  rent?: Maybe<RentUpdateOneWithoutCommentsInput>;
}

export interface BoardUpdateOneWithoutCommentsInput {
  create?: Maybe<BoardCreateWithoutCommentsInput>;
  update?: Maybe<BoardUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<BoardUpsertWithoutCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<BoardWhereUniqueInput>;
}

export interface BoardUpdateWithoutCommentsDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutBoardsInput>;
  title?: Maybe<String>;
  caption?: Maybe<String>;
}

export interface BoardUpsertWithoutCommentsInput {
  update: BoardUpdateWithoutCommentsDataInput;
  create: BoardCreateWithoutCommentsInput;
}

export interface RentUpdateOneWithoutCommentsInput {
  create?: Maybe<RentCreateWithoutCommentsInput>;
  update?: Maybe<RentUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<RentUpsertWithoutCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<RentWhereUniqueInput>;
}

export interface RentUpdateWithoutCommentsDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutRentsInput>;
  title?: Maybe<String>;
  caption?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutRentsInput {
  create?: Maybe<UserCreateWithoutRentsInput>;
  update?: Maybe<UserUpdateWithoutRentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutRentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutRentsDataInput {
  avatar?: Maybe<String>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username?: Maybe<String>;
  intro?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  boards?: Maybe<BoardUpdateManyWithoutUserInput>;
  markets?: Maybe<MarketUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface CommentUpdateManyWithoutUserInput {
  create?: Maybe<
    CommentCreateWithoutUserInput[] | CommentCreateWithoutUserInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutUserInput[]
    | CommentUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutUserInput[]
    | CommentUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutUserDataInput;
}

export interface CommentUpdateWithoutUserDataInput {
  text?: Maybe<String>;
  board?: Maybe<BoardUpdateOneWithoutCommentsInput>;
  market?: Maybe<MarketUpdateOneWithoutCommentsInput>;
  rent?: Maybe<RentUpdateOneWithoutCommentsInput>;
}

export interface MarketUpdateOneWithoutCommentsInput {
  create?: Maybe<MarketCreateWithoutCommentsInput>;
  update?: Maybe<MarketUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<MarketUpsertWithoutCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<MarketWhereUniqueInput>;
}

export interface MarketUpdateWithoutCommentsDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutMarketsInput>;
  title?: Maybe<String>;
  caption?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutMarketsInput {
  create?: Maybe<UserCreateWithoutMarketsInput>;
  update?: Maybe<UserUpdateWithoutMarketsDataInput>;
  upsert?: Maybe<UserUpsertWithoutMarketsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutMarketsDataInput {
  avatar?: Maybe<String>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username?: Maybe<String>;
  intro?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  boards?: Maybe<BoardUpdateManyWithoutUserInput>;
  rents?: Maybe<RentUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface RentUpdateManyWithoutUserInput {
  create?: Maybe<RentCreateWithoutUserInput[] | RentCreateWithoutUserInput>;
  delete?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
  connect?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
  set?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
  disconnect?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
  update?: Maybe<
    | RentUpdateWithWhereUniqueWithoutUserInput[]
    | RentUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | RentUpsertWithWhereUniqueWithoutUserInput[]
    | RentUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<RentScalarWhereInput[] | RentScalarWhereInput>;
  updateMany?: Maybe<
    RentUpdateManyWithWhereNestedInput[] | RentUpdateManyWithWhereNestedInput
  >;
}

export interface RentUpdateWithWhereUniqueWithoutUserInput {
  where: RentWhereUniqueInput;
  data: RentUpdateWithoutUserDataInput;
}

export interface RentUpdateWithoutUserDataInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutRentInput>;
}

export interface CommentUpdateManyWithoutRentInput {
  create?: Maybe<
    CommentCreateWithoutRentInput[] | CommentCreateWithoutRentInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutRentInput[]
    | CommentUpdateWithWhereUniqueWithoutRentInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutRentInput[]
    | CommentUpsertWithWhereUniqueWithoutRentInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutRentInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutRentDataInput;
}

export interface CommentUpdateWithoutRentDataInput {
  text?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutCommentsInput>;
  board?: Maybe<BoardUpdateOneWithoutCommentsInput>;
  market?: Maybe<MarketUpdateOneWithoutCommentsInput>;
}

export interface CommentUpsertWithWhereUniqueWithoutRentInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutRentDataInput;
  create: CommentCreateWithoutRentInput;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface RentUpsertWithWhereUniqueWithoutUserInput {
  where: RentWhereUniqueInput;
  update: RentUpdateWithoutUserDataInput;
  create: RentCreateWithoutUserInput;
}

export interface RentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RentScalarWhereInput[] | RentScalarWhereInput>;
  OR?: Maybe<RentScalarWhereInput[] | RentScalarWhereInput>;
  NOT?: Maybe<RentScalarWhereInput[] | RentScalarWhereInput>;
}

export interface RentUpdateManyWithWhereNestedInput {
  where: RentScalarWhereInput;
  data: RentUpdateManyDataInput;
}

export interface RentUpdateManyDataInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
}

export interface UserUpsertWithoutMarketsInput {
  update: UserUpdateWithoutMarketsDataInput;
  create: UserCreateWithoutMarketsInput;
}

export interface MarketUpsertWithoutCommentsInput {
  update: MarketUpdateWithoutCommentsDataInput;
  create: MarketCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutUserDataInput;
  create: CommentCreateWithoutUserInput;
}

export interface UserUpsertWithoutRentsInput {
  update: UserUpdateWithoutRentsDataInput;
  create: UserCreateWithoutRentsInput;
}

export interface RentUpsertWithoutCommentsInput {
  update: RentUpdateWithoutCommentsDataInput;
  create: RentCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutMarketInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutMarketDataInput;
  create: CommentCreateWithoutMarketInput;
}

export interface MarketUpsertWithWhereUniqueWithoutUserInput {
  where: MarketWhereUniqueInput;
  update: MarketUpdateWithoutUserDataInput;
  create: MarketCreateWithoutUserInput;
}

export interface MarketScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MarketScalarWhereInput[] | MarketScalarWhereInput>;
  OR?: Maybe<MarketScalarWhereInput[] | MarketScalarWhereInput>;
  NOT?: Maybe<MarketScalarWhereInput[] | MarketScalarWhereInput>;
}

export interface MarketUpdateManyWithWhereNestedInput {
  where: MarketScalarWhereInput;
  data: MarketUpdateManyDataInput;
}

export interface MarketUpdateManyDataInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
}

export interface UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput;
  create: UserCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutBoardInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutBoardDataInput;
  create: CommentCreateWithoutBoardInput;
}

export interface BoardUpsertWithWhereUniqueWithoutUserInput {
  where: BoardWhereUniqueInput;
  update: BoardUpdateWithoutUserDataInput;
  create: BoardCreateWithoutUserInput;
}

export interface BoardScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BoardScalarWhereInput[] | BoardScalarWhereInput>;
  OR?: Maybe<BoardScalarWhereInput[] | BoardScalarWhereInput>;
  NOT?: Maybe<BoardScalarWhereInput[] | BoardScalarWhereInput>;
}

export interface BoardUpdateManyWithWhereNestedInput {
  where: BoardScalarWhereInput;
  data: BoardUpdateManyDataInput;
}

export interface BoardUpdateManyDataInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface CommentUpdateManyInput {
  create?: Maybe<CommentCreateInput[] | CommentCreateInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueNestedInput[]
    | CommentUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueNestedInput[]
    | CommentUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateDataInput;
}

export interface CommentUpdateDataInput {
  text?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutCommentsInput>;
  board?: Maybe<BoardUpdateOneWithoutCommentsInput>;
  market?: Maybe<MarketUpdateOneWithoutCommentsInput>;
  rent?: Maybe<RentUpdateOneWithoutCommentsInput>;
}

export interface CommentUpsertWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateDataInput;
  create: CommentCreateInput;
}

export interface NoticeUpsertWithWhereUniqueNestedInput {
  where: NoticeWhereUniqueInput;
  update: NoticeUpdateDataInput;
  create: NoticeCreateInput;
}

export interface NoticeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<NoticeScalarWhereInput[] | NoticeScalarWhereInput>;
  OR?: Maybe<NoticeScalarWhereInput[] | NoticeScalarWhereInput>;
  NOT?: Maybe<NoticeScalarWhereInput[] | NoticeScalarWhereInput>;
}

export interface NoticeUpdateManyWithWhereNestedInput {
  where: NoticeScalarWhereInput;
  data: NoticeUpdateManyDataInput;
}

export interface NoticeUpdateManyDataInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
}

export interface MarketUpdateManyInput {
  create?: Maybe<MarketCreateInput[] | MarketCreateInput>;
  update?: Maybe<
    | MarketUpdateWithWhereUniqueNestedInput[]
    | MarketUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | MarketUpsertWithWhereUniqueNestedInput[]
    | MarketUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<MarketWhereUniqueInput[] | MarketWhereUniqueInput>;
  connect?: Maybe<MarketWhereUniqueInput[] | MarketWhereUniqueInput>;
  set?: Maybe<MarketWhereUniqueInput[] | MarketWhereUniqueInput>;
  disconnect?: Maybe<MarketWhereUniqueInput[] | MarketWhereUniqueInput>;
  deleteMany?: Maybe<MarketScalarWhereInput[] | MarketScalarWhereInput>;
  updateMany?: Maybe<
    | MarketUpdateManyWithWhereNestedInput[]
    | MarketUpdateManyWithWhereNestedInput
  >;
}

export interface MarketUpdateWithWhereUniqueNestedInput {
  where: MarketWhereUniqueInput;
  data: MarketUpdateDataInput;
}

export interface MarketUpdateDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutMarketsInput>;
  title?: Maybe<String>;
  caption?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutMarketInput>;
}

export interface MarketUpsertWithWhereUniqueNestedInput {
  where: MarketWhereUniqueInput;
  update: MarketUpdateDataInput;
  create: MarketCreateInput;
}

export interface BoardUpdateManyInput {
  create?: Maybe<BoardCreateInput[] | BoardCreateInput>;
  update?: Maybe<
    | BoardUpdateWithWhereUniqueNestedInput[]
    | BoardUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | BoardUpsertWithWhereUniqueNestedInput[]
    | BoardUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  connect?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  set?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  disconnect?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  deleteMany?: Maybe<BoardScalarWhereInput[] | BoardScalarWhereInput>;
  updateMany?: Maybe<
    BoardUpdateManyWithWhereNestedInput[] | BoardUpdateManyWithWhereNestedInput
  >;
}

export interface BoardUpdateWithWhereUniqueNestedInput {
  where: BoardWhereUniqueInput;
  data: BoardUpdateDataInput;
}

export interface BoardUpdateDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutBoardsInput>;
  title?: Maybe<String>;
  caption?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutBoardInput>;
}

export interface BoardUpsertWithWhereUniqueNestedInput {
  where: BoardWhereUniqueInput;
  update: BoardUpdateDataInput;
  create: BoardCreateInput;
}

export interface RentUpdateManyInput {
  create?: Maybe<RentCreateInput[] | RentCreateInput>;
  update?: Maybe<
    | RentUpdateWithWhereUniqueNestedInput[]
    | RentUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | RentUpsertWithWhereUniqueNestedInput[]
    | RentUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
  connect?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
  set?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
  disconnect?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
  deleteMany?: Maybe<RentScalarWhereInput[] | RentScalarWhereInput>;
  updateMany?: Maybe<
    RentUpdateManyWithWhereNestedInput[] | RentUpdateManyWithWhereNestedInput
  >;
}

export interface RentUpdateWithWhereUniqueNestedInput {
  where: RentWhereUniqueInput;
  data: RentUpdateDataInput;
}

export interface RentUpdateDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutRentsInput>;
  title?: Maybe<String>;
  caption?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutRentInput>;
}

export interface RentUpsertWithWhereUniqueNestedInput {
  where: RentWhereUniqueInput;
  update: RentUpdateDataInput;
  create: RentCreateInput;
}

export interface PostUpsertWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutUserDataInput;
  create: PostCreateWithoutUserInput;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface UserUpsertWithoutBoardsInput {
  update: UserUpdateWithoutBoardsDataInput;
  create: UserCreateWithoutBoardsInput;
}

export interface BoardUpdateManyMutationInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
}

export interface CommentUpdateInput {
  text?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutCommentsInput>;
  board?: Maybe<BoardUpdateOneWithoutCommentsInput>;
  market?: Maybe<MarketUpdateOneWithoutCommentsInput>;
  rent?: Maybe<RentUpdateOneWithoutCommentsInput>;
}

export interface CommentUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface ImageCreateInput {
  id?: Maybe<ID_Input>;
  url: String;
}

export interface ImageUpdateInput {
  url?: Maybe<String>;
}

export interface ImageUpdateManyMutationInput {
  url?: Maybe<String>;
}

export interface MarketUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutMarketsInput>;
  title?: Maybe<String>;
  caption?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutMarketInput>;
}

export interface MarketUpdateManyMutationInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
}

export interface NoticeUpdateInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  title?: Maybe<String>;
  caption?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyInput>;
}

export interface NoticeUpdateManyMutationInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutPostsInput;
  notices?: Maybe<NoticeCreateManyInput>;
  markgets?: Maybe<MarketCreateManyInput>;
  boards?: Maybe<BoardCreateManyInput>;
  rents?: Maybe<RentCreateManyInput>;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  email: String;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username: String;
  intro?: Maybe<String>;
  boards?: Maybe<BoardCreateManyWithoutUserInput>;
  markets?: Maybe<MarketCreateManyWithoutUserInput>;
  rents?: Maybe<RentCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface PostUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  notices?: Maybe<NoticeUpdateManyInput>;
  markgets?: Maybe<MarketUpdateManyInput>;
  boards?: Maybe<BoardUpdateManyInput>;
  rents?: Maybe<RentUpdateManyInput>;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPostsDataInput {
  avatar?: Maybe<String>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username?: Maybe<String>;
  intro?: Maybe<String>;
  boards?: Maybe<BoardUpdateManyWithoutUserInput>;
  markets?: Maybe<MarketUpdateManyWithoutUserInput>;
  rents?: Maybe<RentUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface RentUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutRentsInput>;
  title?: Maybe<String>;
  caption?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutRentInput>;
}

export interface RentUpdateManyMutationInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
}

export interface UserUpdateInput {
  avatar?: Maybe<String>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username?: Maybe<String>;
  intro?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  boards?: Maybe<BoardUpdateManyWithoutUserInput>;
  markets?: Maybe<MarketUpdateManyWithoutUserInput>;
  rents?: Maybe<RentUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  avatar?: Maybe<String>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username?: Maybe<String>;
  intro?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface BoardSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BoardWhereInput>;
  AND?: Maybe<BoardSubscriptionWhereInput[] | BoardSubscriptionWhereInput>;
  OR?: Maybe<BoardSubscriptionWhereInput[] | BoardSubscriptionWhereInput>;
  NOT?: Maybe<BoardSubscriptionWhereInput[] | BoardSubscriptionWhereInput>;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface ImageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ImageWhereInput>;
  AND?: Maybe<ImageSubscriptionWhereInput[] | ImageSubscriptionWhereInput>;
  OR?: Maybe<ImageSubscriptionWhereInput[] | ImageSubscriptionWhereInput>;
  NOT?: Maybe<ImageSubscriptionWhereInput[] | ImageSubscriptionWhereInput>;
}

export interface MarketSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MarketWhereInput>;
  AND?: Maybe<MarketSubscriptionWhereInput[] | MarketSubscriptionWhereInput>;
  OR?: Maybe<MarketSubscriptionWhereInput[] | MarketSubscriptionWhereInput>;
  NOT?: Maybe<MarketSubscriptionWhereInput[] | MarketSubscriptionWhereInput>;
}

export interface NoticeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NoticeWhereInput>;
  AND?: Maybe<NoticeSubscriptionWhereInput[] | NoticeSubscriptionWhereInput>;
  OR?: Maybe<NoticeSubscriptionWhereInput[] | NoticeSubscriptionWhereInput>;
  NOT?: Maybe<NoticeSubscriptionWhereInput[] | NoticeSubscriptionWhereInput>;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface RentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RentWhereInput>;
  AND?: Maybe<RentSubscriptionWhereInput[] | RentSubscriptionWhereInput>;
  OR?: Maybe<RentSubscriptionWhereInput[] | RentSubscriptionWhereInput>;
  NOT?: Maybe<RentSubscriptionWhereInput[] | RentSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Board {
  id: ID_Output;
  title: String;
  caption: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface BoardPromise extends Promise<Board>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BoardSubscription
  extends Promise<AsyncIterator<Board>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BoardNullablePromise
  extends Promise<Board | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  avatar?: String;
  email: String;
  firstName?: String;
  lastName?: String;
  username: String;
  intro?: String;
  loginSecret?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  avatar: () => Promise<String>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  username: () => Promise<String>;
  intro: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  boards: <T = FragmentableArray<Board>>(args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  markets: <T = FragmentableArray<Market>>(args?: {
    where?: MarketWhereInput;
    orderBy?: MarketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rents: <T = FragmentableArray<Rent>>(args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  loginSecret: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  avatar: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  intro: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  boards: <T = Promise<AsyncIterator<BoardSubscription>>>(args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  markets: <T = Promise<AsyncIterator<MarketSubscription>>>(args?: {
    where?: MarketWhereInput;
    orderBy?: MarketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rents: <T = Promise<AsyncIterator<RentSubscription>>>(args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  loginSecret: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  avatar: () => Promise<String>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  username: () => Promise<String>;
  intro: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  boards: <T = FragmentableArray<Board>>(args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  markets: <T = FragmentableArray<Market>>(args?: {
    where?: MarketWhereInput;
    orderBy?: MarketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rents: <T = FragmentableArray<Rent>>(args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  loginSecret: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Post {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  notices: <T = FragmentableArray<Notice>>(args?: {
    where?: NoticeWhereInput;
    orderBy?: NoticeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  markgets: <T = FragmentableArray<Market>>(args?: {
    where?: MarketWhereInput;
    orderBy?: MarketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  boards: <T = FragmentableArray<Board>>(args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rents: <T = FragmentableArray<Rent>>(args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  notices: <T = Promise<AsyncIterator<NoticeSubscription>>>(args?: {
    where?: NoticeWhereInput;
    orderBy?: NoticeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  markgets: <T = Promise<AsyncIterator<MarketSubscription>>>(args?: {
    where?: MarketWhereInput;
    orderBy?: MarketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  boards: <T = Promise<AsyncIterator<BoardSubscription>>>(args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rents: <T = Promise<AsyncIterator<RentSubscription>>>(args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  notices: <T = FragmentableArray<Notice>>(args?: {
    where?: NoticeWhereInput;
    orderBy?: NoticeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  markgets: <T = FragmentableArray<Market>>(args?: {
    where?: MarketWhereInput;
    orderBy?: MarketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  boards: <T = FragmentableArray<Board>>(args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rents: <T = FragmentableArray<Rent>>(args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Notice {
  id: ID_Output;
  title: String;
  caption: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface NoticePromise extends Promise<Notice>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface NoticeSubscription
  extends Promise<AsyncIterator<Notice>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface NoticeNullablePromise
  extends Promise<Notice | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Comment {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  user: <T = UserPromise>() => T;
  board: <T = BoardPromise>() => T;
  market: <T = MarketPromise>() => T;
  rent: <T = RentPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  board: <T = BoardSubscription>() => T;
  market: <T = MarketSubscription>() => T;
  rent: <T = RentSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  user: <T = UserPromise>() => T;
  board: <T = BoardPromise>() => T;
  market: <T = MarketPromise>() => T;
  rent: <T = RentPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Market {
  id: ID_Output;
  title: String;
  caption: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MarketPromise extends Promise<Market>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MarketSubscription
  extends Promise<AsyncIterator<Market>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MarketNullablePromise
  extends Promise<Market | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Rent {
  id: ID_Output;
  title: String;
  caption: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RentPromise extends Promise<Rent>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RentSubscription
  extends Promise<AsyncIterator<Rent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RentNullablePromise
  extends Promise<Rent | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BoardConnection {
  pageInfo: PageInfo;
  edges: BoardEdge[];
}

export interface BoardConnectionPromise
  extends Promise<BoardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BoardEdge>>() => T;
  aggregate: <T = AggregateBoardPromise>() => T;
}

export interface BoardConnectionSubscription
  extends Promise<AsyncIterator<BoardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BoardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBoardSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BoardEdge {
  node: Board;
  cursor: String;
}

export interface BoardEdgePromise extends Promise<BoardEdge>, Fragmentable {
  node: <T = BoardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BoardEdgeSubscription
  extends Promise<AsyncIterator<BoardEdge>>,
    Fragmentable {
  node: <T = BoardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBoard {
  count: Int;
}

export interface AggregateBoardPromise
  extends Promise<AggregateBoard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBoardSubscription
  extends Promise<AsyncIterator<AggregateBoard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Image {
  id: ID_Output;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ImagePromise extends Promise<Image>, Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ImageSubscription
  extends Promise<AsyncIterator<Image>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ImageNullablePromise
  extends Promise<Image | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ImageConnection {
  pageInfo: PageInfo;
  edges: ImageEdge[];
}

export interface ImageConnectionPromise
  extends Promise<ImageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ImageEdge>>() => T;
  aggregate: <T = AggregateImagePromise>() => T;
}

export interface ImageConnectionSubscription
  extends Promise<AsyncIterator<ImageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ImageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateImageSubscription>() => T;
}

export interface ImageEdge {
  node: Image;
  cursor: String;
}

export interface ImageEdgePromise extends Promise<ImageEdge>, Fragmentable {
  node: <T = ImagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ImageEdgeSubscription
  extends Promise<AsyncIterator<ImageEdge>>,
    Fragmentable {
  node: <T = ImageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateImage {
  count: Int;
}

export interface AggregateImagePromise
  extends Promise<AggregateImage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateImageSubscription
  extends Promise<AsyncIterator<AggregateImage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MarketConnection {
  pageInfo: PageInfo;
  edges: MarketEdge[];
}

export interface MarketConnectionPromise
  extends Promise<MarketConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MarketEdge>>() => T;
  aggregate: <T = AggregateMarketPromise>() => T;
}

export interface MarketConnectionSubscription
  extends Promise<AsyncIterator<MarketConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MarketEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMarketSubscription>() => T;
}

export interface MarketEdge {
  node: Market;
  cursor: String;
}

export interface MarketEdgePromise extends Promise<MarketEdge>, Fragmentable {
  node: <T = MarketPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MarketEdgeSubscription
  extends Promise<AsyncIterator<MarketEdge>>,
    Fragmentable {
  node: <T = MarketSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMarket {
  count: Int;
}

export interface AggregateMarketPromise
  extends Promise<AggregateMarket>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMarketSubscription
  extends Promise<AsyncIterator<AggregateMarket>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NoticeConnection {
  pageInfo: PageInfo;
  edges: NoticeEdge[];
}

export interface NoticeConnectionPromise
  extends Promise<NoticeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NoticeEdge>>() => T;
  aggregate: <T = AggregateNoticePromise>() => T;
}

export interface NoticeConnectionSubscription
  extends Promise<AsyncIterator<NoticeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NoticeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNoticeSubscription>() => T;
}

export interface NoticeEdge {
  node: Notice;
  cursor: String;
}

export interface NoticeEdgePromise extends Promise<NoticeEdge>, Fragmentable {
  node: <T = NoticePromise>() => T;
  cursor: () => Promise<String>;
}

export interface NoticeEdgeSubscription
  extends Promise<AsyncIterator<NoticeEdge>>,
    Fragmentable {
  node: <T = NoticeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNotice {
  count: Int;
}

export interface AggregateNoticePromise
  extends Promise<AggregateNotice>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNoticeSubscription
  extends Promise<AsyncIterator<AggregateNotice>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RentConnection {
  pageInfo: PageInfo;
  edges: RentEdge[];
}

export interface RentConnectionPromise
  extends Promise<RentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RentEdge>>() => T;
  aggregate: <T = AggregateRentPromise>() => T;
}

export interface RentConnectionSubscription
  extends Promise<AsyncIterator<RentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRentSubscription>() => T;
}

export interface RentEdge {
  node: Rent;
  cursor: String;
}

export interface RentEdgePromise extends Promise<RentEdge>, Fragmentable {
  node: <T = RentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RentEdgeSubscription
  extends Promise<AsyncIterator<RentEdge>>,
    Fragmentable {
  node: <T = RentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRent {
  count: Int;
}

export interface AggregateRentPromise
  extends Promise<AggregateRent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRentSubscription
  extends Promise<AsyncIterator<AggregateRent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BoardSubscriptionPayload {
  mutation: MutationType;
  node: Board;
  updatedFields: String[];
  previousValues: BoardPreviousValues;
}

export interface BoardSubscriptionPayloadPromise
  extends Promise<BoardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BoardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BoardPreviousValuesPromise>() => T;
}

export interface BoardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BoardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BoardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BoardPreviousValuesSubscription>() => T;
}

export interface BoardPreviousValues {
  id: ID_Output;
  title: String;
  caption: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface BoardPreviousValuesPromise
  extends Promise<BoardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BoardPreviousValuesSubscription
  extends Promise<AsyncIterator<BoardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ImageSubscriptionPayload {
  mutation: MutationType;
  node: Image;
  updatedFields: String[];
  previousValues: ImagePreviousValues;
}

export interface ImageSubscriptionPayloadPromise
  extends Promise<ImageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ImagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ImagePreviousValuesPromise>() => T;
}

export interface ImageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ImageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ImageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ImagePreviousValuesSubscription>() => T;
}

export interface ImagePreviousValues {
  id: ID_Output;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ImagePreviousValuesPromise
  extends Promise<ImagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ImagePreviousValuesSubscription
  extends Promise<AsyncIterator<ImagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MarketSubscriptionPayload {
  mutation: MutationType;
  node: Market;
  updatedFields: String[];
  previousValues: MarketPreviousValues;
}

export interface MarketSubscriptionPayloadPromise
  extends Promise<MarketSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MarketPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MarketPreviousValuesPromise>() => T;
}

export interface MarketSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MarketSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MarketSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MarketPreviousValuesSubscription>() => T;
}

export interface MarketPreviousValues {
  id: ID_Output;
  title: String;
  caption: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MarketPreviousValuesPromise
  extends Promise<MarketPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MarketPreviousValuesSubscription
  extends Promise<AsyncIterator<MarketPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface NoticeSubscriptionPayload {
  mutation: MutationType;
  node: Notice;
  updatedFields: String[];
  previousValues: NoticePreviousValues;
}

export interface NoticeSubscriptionPayloadPromise
  extends Promise<NoticeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NoticePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NoticePreviousValuesPromise>() => T;
}

export interface NoticeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NoticeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NoticeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NoticePreviousValuesSubscription>() => T;
}

export interface NoticePreviousValues {
  id: ID_Output;
  title: String;
  caption: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface NoticePreviousValuesPromise
  extends Promise<NoticePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface NoticePreviousValuesSubscription
  extends Promise<AsyncIterator<NoticePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RentSubscriptionPayload {
  mutation: MutationType;
  node: Rent;
  updatedFields: String[];
  previousValues: RentPreviousValues;
}

export interface RentSubscriptionPayloadPromise
  extends Promise<RentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RentPreviousValuesPromise>() => T;
}

export interface RentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RentPreviousValuesSubscription>() => T;
}

export interface RentPreviousValues {
  id: ID_Output;
  title: String;
  caption: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RentPreviousValuesPromise
  extends Promise<RentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RentPreviousValuesSubscription
  extends Promise<AsyncIterator<RentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  avatar?: String;
  email: String;
  firstName?: String;
  lastName?: String;
  username: String;
  intro?: String;
  loginSecret?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  avatar: () => Promise<String>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  username: () => Promise<String>;
  intro: () => Promise<String>;
  loginSecret: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  avatar: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  intro: () => Promise<AsyncIterator<String>>;
  loginSecret: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Notice",
    embedded: false
  },
  {
    name: "Market",
    embedded: false
  },
  {
    name: "Rent",
    embedded: false
  },
  {
    name: "Board",
    embedded: false
  },
  {
    name: "Image",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
