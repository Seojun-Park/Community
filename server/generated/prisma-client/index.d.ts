// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  board: (where?: BoardWhereInput) => Promise<boolean>;
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  image: (where?: ImageWhereInput) => Promise<boolean>;
  info: (where?: InfoWhereInput) => Promise<boolean>;
  market: (where?: MarketWhereInput) => Promise<boolean>;
  meet: (where?: MeetWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  notice: (where?: NoticeWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  rent: (where?: RentWhereInput) => Promise<boolean>;
  room: (where?: RoomWhereInput) => Promise<boolean>;
  schedule: (where?: ScheduleWhereInput) => Promise<boolean>;
  tag: (where?: TagWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  board: (where: BoardWhereUniqueInput) => BoardNullablePromise;
  boards: (args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Board>;
  boardsConnection: (args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BoardConnectionPromise;
  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  image: (where: ImageWhereUniqueInput) => ImageNullablePromise;
  images: (args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Image>;
  imagesConnection: (args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ImageConnectionPromise;
  info: (where: InfoWhereUniqueInput) => InfoNullablePromise;
  infoes: (args?: {
    where?: InfoWhereInput;
    orderBy?: InfoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Info>;
  infoesConnection: (args?: {
    where?: InfoWhereInput;
    orderBy?: InfoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => InfoConnectionPromise;
  market: (where: MarketWhereUniqueInput) => MarketNullablePromise;
  markets: (args?: {
    where?: MarketWhereInput;
    orderBy?: MarketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Market>;
  marketsConnection: (args?: {
    where?: MarketWhereInput;
    orderBy?: MarketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MarketConnectionPromise;
  meet: (where: MeetWhereUniqueInput) => MeetNullablePromise;
  meets: (args?: {
    where?: MeetWhereInput;
    orderBy?: MeetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Meet>;
  meetsConnection: (args?: {
    where?: MeetWhereInput;
    orderBy?: MeetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MeetConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessageNullablePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  notice: (where: NoticeWhereUniqueInput) => NoticeNullablePromise;
  notices: (args?: {
    where?: NoticeWhereInput;
    orderBy?: NoticeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Notice>;
  noticesConnection: (args?: {
    where?: NoticeWhereInput;
    orderBy?: NoticeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NoticeConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  rent: (where: RentWhereUniqueInput) => RentNullablePromise;
  rents: (args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Rent>;
  rentsConnection: (args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RentConnectionPromise;
  room: (where: RoomWhereUniqueInput) => RoomNullablePromise;
  rooms: (args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Room>;
  roomsConnection: (args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RoomConnectionPromise;
  schedule: (where: ScheduleWhereUniqueInput) => ScheduleNullablePromise;
  schedules: (args?: {
    where?: ScheduleWhereInput;
    orderBy?: ScheduleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Schedule>;
  schedulesConnection: (args?: {
    where?: ScheduleWhereInput;
    orderBy?: ScheduleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ScheduleConnectionPromise;
  tag: (where: TagWhereUniqueInput) => TagNullablePromise;
  tags: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Tag>;
  tagsConnection: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TagConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBoard: (data: BoardCreateInput) => BoardPromise;
  updateBoard: (args: {
    data: BoardUpdateInput;
    where: BoardWhereUniqueInput;
  }) => BoardPromise;
  updateManyBoards: (args: {
    data: BoardUpdateManyMutationInput;
    where?: BoardWhereInput;
  }) => BatchPayloadPromise;
  upsertBoard: (args: {
    where: BoardWhereUniqueInput;
    create: BoardCreateInput;
    update: BoardUpdateInput;
  }) => BoardPromise;
  deleteBoard: (where: BoardWhereUniqueInput) => BoardPromise;
  deleteManyBoards: (where?: BoardWhereInput) => BatchPayloadPromise;
  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createImage: (data: ImageCreateInput) => ImagePromise;
  updateImage: (args: {
    data: ImageUpdateInput;
    where: ImageWhereUniqueInput;
  }) => ImagePromise;
  updateManyImages: (args: {
    data: ImageUpdateManyMutationInput;
    where?: ImageWhereInput;
  }) => BatchPayloadPromise;
  upsertImage: (args: {
    where: ImageWhereUniqueInput;
    create: ImageCreateInput;
    update: ImageUpdateInput;
  }) => ImagePromise;
  deleteImage: (where: ImageWhereUniqueInput) => ImagePromise;
  deleteManyImages: (where?: ImageWhereInput) => BatchPayloadPromise;
  createInfo: (data: InfoCreateInput) => InfoPromise;
  updateInfo: (args: {
    data: InfoUpdateInput;
    where: InfoWhereUniqueInput;
  }) => InfoPromise;
  updateManyInfoes: (args: {
    data: InfoUpdateManyMutationInput;
    where?: InfoWhereInput;
  }) => BatchPayloadPromise;
  upsertInfo: (args: {
    where: InfoWhereUniqueInput;
    create: InfoCreateInput;
    update: InfoUpdateInput;
  }) => InfoPromise;
  deleteInfo: (where: InfoWhereUniqueInput) => InfoPromise;
  deleteManyInfoes: (where?: InfoWhereInput) => BatchPayloadPromise;
  createMarket: (data: MarketCreateInput) => MarketPromise;
  updateMarket: (args: {
    data: MarketUpdateInput;
    where: MarketWhereUniqueInput;
  }) => MarketPromise;
  updateManyMarkets: (args: {
    data: MarketUpdateManyMutationInput;
    where?: MarketWhereInput;
  }) => BatchPayloadPromise;
  upsertMarket: (args: {
    where: MarketWhereUniqueInput;
    create: MarketCreateInput;
    update: MarketUpdateInput;
  }) => MarketPromise;
  deleteMarket: (where: MarketWhereUniqueInput) => MarketPromise;
  deleteManyMarkets: (where?: MarketWhereInput) => BatchPayloadPromise;
  createMeet: (data: MeetCreateInput) => MeetPromise;
  updateMeet: (args: {
    data: MeetUpdateInput;
    where: MeetWhereUniqueInput;
  }) => MeetPromise;
  updateManyMeets: (args: {
    data: MeetUpdateManyMutationInput;
    where?: MeetWhereInput;
  }) => BatchPayloadPromise;
  upsertMeet: (args: {
    where: MeetWhereUniqueInput;
    create: MeetCreateInput;
    update: MeetUpdateInput;
  }) => MeetPromise;
  deleteMeet: (where: MeetWhereUniqueInput) => MeetPromise;
  deleteManyMeets: (where?: MeetWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createNotice: (data: NoticeCreateInput) => NoticePromise;
  updateNotice: (args: {
    data: NoticeUpdateInput;
    where: NoticeWhereUniqueInput;
  }) => NoticePromise;
  updateManyNotices: (args: {
    data: NoticeUpdateManyMutationInput;
    where?: NoticeWhereInput;
  }) => BatchPayloadPromise;
  upsertNotice: (args: {
    where: NoticeWhereUniqueInput;
    create: NoticeCreateInput;
    update: NoticeUpdateInput;
  }) => NoticePromise;
  deleteNotice: (where: NoticeWhereUniqueInput) => NoticePromise;
  deleteManyNotices: (where?: NoticeWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createRent: (data: RentCreateInput) => RentPromise;
  updateRent: (args: {
    data: RentUpdateInput;
    where: RentWhereUniqueInput;
  }) => RentPromise;
  updateManyRents: (args: {
    data: RentUpdateManyMutationInput;
    where?: RentWhereInput;
  }) => BatchPayloadPromise;
  upsertRent: (args: {
    where: RentWhereUniqueInput;
    create: RentCreateInput;
    update: RentUpdateInput;
  }) => RentPromise;
  deleteRent: (where: RentWhereUniqueInput) => RentPromise;
  deleteManyRents: (where?: RentWhereInput) => BatchPayloadPromise;
  createRoom: (data: RoomCreateInput) => RoomPromise;
  updateRoom: (args: {
    data: RoomUpdateInput;
    where: RoomWhereUniqueInput;
  }) => RoomPromise;
  upsertRoom: (args: {
    where: RoomWhereUniqueInput;
    create: RoomCreateInput;
    update: RoomUpdateInput;
  }) => RoomPromise;
  deleteRoom: (where: RoomWhereUniqueInput) => RoomPromise;
  deleteManyRooms: (where?: RoomWhereInput) => BatchPayloadPromise;
  createSchedule: (data: ScheduleCreateInput) => SchedulePromise;
  updateSchedule: (args: {
    data: ScheduleUpdateInput;
    where: ScheduleWhereUniqueInput;
  }) => SchedulePromise;
  updateManySchedules: (args: {
    data: ScheduleUpdateManyMutationInput;
    where?: ScheduleWhereInput;
  }) => BatchPayloadPromise;
  upsertSchedule: (args: {
    where: ScheduleWhereUniqueInput;
    create: ScheduleCreateInput;
    update: ScheduleUpdateInput;
  }) => SchedulePromise;
  deleteSchedule: (where: ScheduleWhereUniqueInput) => SchedulePromise;
  deleteManySchedules: (where?: ScheduleWhereInput) => BatchPayloadPromise;
  createTag: (data: TagCreateInput) => TagPromise;
  updateTag: (args: {
    data: TagUpdateInput;
    where: TagWhereUniqueInput;
  }) => TagPromise;
  updateManyTags: (args: {
    data: TagUpdateManyMutationInput;
    where?: TagWhereInput;
  }) => BatchPayloadPromise;
  upsertTag: (args: {
    where: TagWhereUniqueInput;
    create: TagCreateInput;
    update: TagUpdateInput;
  }) => TagPromise;
  deleteTag: (where: TagWhereUniqueInput) => TagPromise;
  deleteManyTags: (where?: TagWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  board: (
    where?: BoardSubscriptionWhereInput
  ) => BoardSubscriptionPayloadSubscription;
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  image: (
    where?: ImageSubscriptionWhereInput
  ) => ImageSubscriptionPayloadSubscription;
  info: (
    where?: InfoSubscriptionWhereInput
  ) => InfoSubscriptionPayloadSubscription;
  market: (
    where?: MarketSubscriptionWhereInput
  ) => MarketSubscriptionPayloadSubscription;
  meet: (
    where?: MeetSubscriptionWhereInput
  ) => MeetSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  notice: (
    where?: NoticeSubscriptionWhereInput
  ) => NoticeSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  rent: (
    where?: RentSubscriptionWhereInput
  ) => RentSubscriptionPayloadSubscription;
  room: (
    where?: RoomSubscriptionWhereInput
  ) => RoomSubscriptionPayloadSubscription;
  schedule: (
    where?: ScheduleSubscriptionWhereInput
  ) => ScheduleSubscriptionPayloadSubscription;
  tag: (
    where?: TagSubscriptionWhereInput
  ) => TagSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type NoticeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "caption_ASC"
  | "caption_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MarketOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "caption_ASC"
  | "caption_DESC"
  | "status_ASC"
  | "status_DESC"
  | "price_ASC"
  | "price_DESC"
  | "thumbnail_ASC"
  | "thumbnail_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ImageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "email_ASC"
  | "email_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "username_ASC"
  | "username_DESC"
  | "intro_ASC"
  | "intro_DESC"
  | "loginSecret_ASC"
  | "loginSecret_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TagOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MeetOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "intro_ASC"
  | "intro_DESC"
  | "title_ASC"
  | "title_DESC"
  | "creator_ASC"
  | "creator_DESC"
  | "location_ASC"
  | "location_DESC"
  | "date_ASC"
  | "date_DESC"
  | "time_ASC"
  | "time_DESC"
  | "isPublic_ASC"
  | "isPublic_DESC"
  | "member_ASC"
  | "member_DESC"
  | "thumbnail_ASC"
  | "thumbnail_DESC"
  | "theme_ASC"
  | "theme_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type BoardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "caption_ASC"
  | "caption_DESC"
  | "category_ASC"
  | "category_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "caption_ASC"
  | "caption_DESC"
  | "status_ASC"
  | "status_DESC"
  | "size_ASC"
  | "size_DESC"
  | "zone_ASC"
  | "zone_DESC"
  | "price_ASC"
  | "price_DESC"
  | "deposit_ASC"
  | "deposit_DESC"
  | "type_ASC"
  | "type_DESC"
  | "address_ASC"
  | "address_DESC"
  | "condition_ASC"
  | "condition_DESC"
  | "thumbnail_ASC"
  | "thumbnail_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RoomOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ScheduleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "date_ASC"
  | "date_DESC"
  | "todo_ASC"
  | "todo_DESC"
  | "tag_ASC"
  | "tag_DESC"
  | "isOn_ASC"
  | "isOn_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type InfoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "text_ASC"
  | "text_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type BoardWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  notices_every?: Maybe<NoticeWhereInput>;
  notices_some?: Maybe<NoticeWhereInput>;
  notices_none?: Maybe<NoticeWhereInput>;
  markgets_every?: Maybe<MarketWhereInput>;
  markgets_some?: Maybe<MarketWhereInput>;
  markgets_none?: Maybe<MarketWhereInput>;
  boards_every?: Maybe<BoardWhereInput>;
  boards_some?: Maybe<BoardWhereInput>;
  boards_none?: Maybe<BoardWhereInput>;
  rents_every?: Maybe<RentWhereInput>;
  rents_some?: Maybe<RentWhereInput>;
  rents_none?: Maybe<RentWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  intro?: Maybe<String>;
  intro_not?: Maybe<String>;
  intro_in?: Maybe<String[] | String>;
  intro_not_in?: Maybe<String[] | String>;
  intro_lt?: Maybe<String>;
  intro_lte?: Maybe<String>;
  intro_gt?: Maybe<String>;
  intro_gte?: Maybe<String>;
  intro_contains?: Maybe<String>;
  intro_not_contains?: Maybe<String>;
  intro_starts_with?: Maybe<String>;
  intro_not_starts_with?: Maybe<String>;
  intro_ends_with?: Maybe<String>;
  intro_not_ends_with?: Maybe<String>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  boards_every?: Maybe<BoardWhereInput>;
  boards_some?: Maybe<BoardWhereInput>;
  boards_none?: Maybe<BoardWhereInput>;
  markets_every?: Maybe<MarketWhereInput>;
  markets_some?: Maybe<MarketWhereInput>;
  markets_none?: Maybe<MarketWhereInput>;
  rents_every?: Maybe<RentWhereInput>;
  rents_some?: Maybe<RentWhereInput>;
  rents_none?: Maybe<RentWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  meets_every?: Maybe<MeetWhereInput>;
  meets_some?: Maybe<MeetWhereInput>;
  meets_none?: Maybe<MeetWhereInput>;
  following_every?: Maybe<UserWhereInput>;
  following_some?: Maybe<UserWhereInput>;
  following_none?: Maybe<UserWhereInput>;
  followers_every?: Maybe<UserWhereInput>;
  followers_some?: Maybe<UserWhereInput>;
  followers_none?: Maybe<UserWhereInput>;
  rooms_every?: Maybe<RoomWhereInput>;
  rooms_some?: Maybe<RoomWhereInput>;
  rooms_none?: Maybe<RoomWhereInput>;
  schedules_every?: Maybe<ScheduleWhereInput>;
  schedules_some?: Maybe<ScheduleWhereInput>;
  schedules_none?: Maybe<ScheduleWhereInput>;
  loginSecret?: Maybe<String>;
  loginSecret_not?: Maybe<String>;
  loginSecret_in?: Maybe<String[] | String>;
  loginSecret_not_in?: Maybe<String[] | String>;
  loginSecret_lt?: Maybe<String>;
  loginSecret_lte?: Maybe<String>;
  loginSecret_gt?: Maybe<String>;
  loginSecret_gte?: Maybe<String>;
  loginSecret_contains?: Maybe<String>;
  loginSecret_not_contains?: Maybe<String>;
  loginSecret_starts_with?: Maybe<String>;
  loginSecret_not_starts_with?: Maybe<String>;
  loginSecret_ends_with?: Maybe<String>;
  loginSecret_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface BoardWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BoardWhereInput[] | BoardWhereInput>;
  OR?: Maybe<BoardWhereInput[] | BoardWhereInput>;
  NOT?: Maybe<BoardWhereInput[] | BoardWhereInput>;
}

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  board?: Maybe<BoardWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export interface MarketWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  price?: Maybe<String>;
  price_not?: Maybe<String>;
  price_in?: Maybe<String[] | String>;
  price_not_in?: Maybe<String[] | String>;
  price_lt?: Maybe<String>;
  price_lte?: Maybe<String>;
  price_gt?: Maybe<String>;
  price_gte?: Maybe<String>;
  price_contains?: Maybe<String>;
  price_not_contains?: Maybe<String>;
  price_starts_with?: Maybe<String>;
  price_not_starts_with?: Maybe<String>;
  price_ends_with?: Maybe<String>;
  price_not_ends_with?: Maybe<String>;
  thumbnail?: Maybe<String>;
  thumbnail_not?: Maybe<String>;
  thumbnail_in?: Maybe<String[] | String>;
  thumbnail_not_in?: Maybe<String[] | String>;
  thumbnail_lt?: Maybe<String>;
  thumbnail_lte?: Maybe<String>;
  thumbnail_gt?: Maybe<String>;
  thumbnail_gte?: Maybe<String>;
  thumbnail_contains?: Maybe<String>;
  thumbnail_not_contains?: Maybe<String>;
  thumbnail_starts_with?: Maybe<String>;
  thumbnail_not_starts_with?: Maybe<String>;
  thumbnail_ends_with?: Maybe<String>;
  thumbnail_not_ends_with?: Maybe<String>;
  images_every?: Maybe<ImageWhereInput>;
  images_some?: Maybe<ImageWhereInput>;
  images_none?: Maybe<ImageWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MarketWhereInput[] | MarketWhereInput>;
  OR?: Maybe<MarketWhereInput[] | MarketWhereInput>;
  NOT?: Maybe<MarketWhereInput[] | MarketWhereInput>;
}

export interface ImageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  meet?: Maybe<MeetWhereInput>;
  market?: Maybe<MarketWhereInput>;
  rent?: Maybe<RentWhereInput>;
  info?: Maybe<InfoWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ImageWhereInput[] | ImageWhereInput>;
  OR?: Maybe<ImageWhereInput[] | ImageWhereInput>;
  NOT?: Maybe<ImageWhereInput[] | ImageWhereInput>;
}

export interface MeetWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  intro?: Maybe<String>;
  intro_not?: Maybe<String>;
  intro_in?: Maybe<String[] | String>;
  intro_not_in?: Maybe<String[] | String>;
  intro_lt?: Maybe<String>;
  intro_lte?: Maybe<String>;
  intro_gt?: Maybe<String>;
  intro_gte?: Maybe<String>;
  intro_contains?: Maybe<String>;
  intro_not_contains?: Maybe<String>;
  intro_starts_with?: Maybe<String>;
  intro_not_starts_with?: Maybe<String>;
  intro_ends_with?: Maybe<String>;
  intro_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  creator?: Maybe<String>;
  creator_not?: Maybe<String>;
  creator_in?: Maybe<String[] | String>;
  creator_not_in?: Maybe<String[] | String>;
  creator_lt?: Maybe<String>;
  creator_lte?: Maybe<String>;
  creator_gt?: Maybe<String>;
  creator_gte?: Maybe<String>;
  creator_contains?: Maybe<String>;
  creator_not_contains?: Maybe<String>;
  creator_starts_with?: Maybe<String>;
  creator_not_starts_with?: Maybe<String>;
  creator_ends_with?: Maybe<String>;
  creator_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  time?: Maybe<String>;
  time_not?: Maybe<String>;
  time_in?: Maybe<String[] | String>;
  time_not_in?: Maybe<String[] | String>;
  time_lt?: Maybe<String>;
  time_lte?: Maybe<String>;
  time_gt?: Maybe<String>;
  time_gte?: Maybe<String>;
  time_contains?: Maybe<String>;
  time_not_contains?: Maybe<String>;
  time_starts_with?: Maybe<String>;
  time_not_starts_with?: Maybe<String>;
  time_ends_with?: Maybe<String>;
  time_not_ends_with?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  isPublic_not?: Maybe<Boolean>;
  member?: Maybe<Int>;
  member_not?: Maybe<Int>;
  member_in?: Maybe<Int[] | Int>;
  member_not_in?: Maybe<Int[] | Int>;
  member_lt?: Maybe<Int>;
  member_lte?: Maybe<Int>;
  member_gt?: Maybe<Int>;
  member_gte?: Maybe<Int>;
  thumbnail?: Maybe<String>;
  thumbnail_not?: Maybe<String>;
  thumbnail_in?: Maybe<String[] | String>;
  thumbnail_not_in?: Maybe<String[] | String>;
  thumbnail_lt?: Maybe<String>;
  thumbnail_lte?: Maybe<String>;
  thumbnail_gt?: Maybe<String>;
  thumbnail_gte?: Maybe<String>;
  thumbnail_contains?: Maybe<String>;
  thumbnail_not_contains?: Maybe<String>;
  thumbnail_starts_with?: Maybe<String>;
  thumbnail_not_starts_with?: Maybe<String>;
  thumbnail_ends_with?: Maybe<String>;
  thumbnail_not_ends_with?: Maybe<String>;
  theme?: Maybe<String>;
  theme_not?: Maybe<String>;
  theme_in?: Maybe<String[] | String>;
  theme_not_in?: Maybe<String[] | String>;
  theme_lt?: Maybe<String>;
  theme_lte?: Maybe<String>;
  theme_gt?: Maybe<String>;
  theme_gte?: Maybe<String>;
  theme_contains?: Maybe<String>;
  theme_not_contains?: Maybe<String>;
  theme_starts_with?: Maybe<String>;
  theme_not_starts_with?: Maybe<String>;
  theme_ends_with?: Maybe<String>;
  theme_not_ends_with?: Maybe<String>;
  participants_every?: Maybe<UserWhereInput>;
  participants_some?: Maybe<UserWhereInput>;
  participants_none?: Maybe<UserWhereInput>;
  images_every?: Maybe<ImageWhereInput>;
  images_some?: Maybe<ImageWhereInput>;
  images_none?: Maybe<ImageWhereInput>;
  tags_every?: Maybe<TagWhereInput>;
  tags_some?: Maybe<TagWhereInput>;
  tags_none?: Maybe<TagWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MeetWhereInput[] | MeetWhereInput>;
  OR?: Maybe<MeetWhereInput[] | MeetWhereInput>;
  NOT?: Maybe<MeetWhereInput[] | MeetWhereInput>;
}

export interface TagWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  meets_every?: Maybe<MeetWhereInput>;
  meets_some?: Maybe<MeetWhereInput>;
  meets_none?: Maybe<MeetWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TagWhereInput[] | TagWhereInput>;
  OR?: Maybe<TagWhereInput[] | TagWhereInput>;
  NOT?: Maybe<TagWhereInput[] | TagWhereInput>;
}

export interface RentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  images_every?: Maybe<ImageWhereInput>;
  images_some?: Maybe<ImageWhereInput>;
  images_none?: Maybe<ImageWhereInput>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  size?: Maybe<String>;
  size_not?: Maybe<String>;
  size_in?: Maybe<String[] | String>;
  size_not_in?: Maybe<String[] | String>;
  size_lt?: Maybe<String>;
  size_lte?: Maybe<String>;
  size_gt?: Maybe<String>;
  size_gte?: Maybe<String>;
  size_contains?: Maybe<String>;
  size_not_contains?: Maybe<String>;
  size_starts_with?: Maybe<String>;
  size_not_starts_with?: Maybe<String>;
  size_ends_with?: Maybe<String>;
  size_not_ends_with?: Maybe<String>;
  zone?: Maybe<String>;
  zone_not?: Maybe<String>;
  zone_in?: Maybe<String[] | String>;
  zone_not_in?: Maybe<String[] | String>;
  zone_lt?: Maybe<String>;
  zone_lte?: Maybe<String>;
  zone_gt?: Maybe<String>;
  zone_gte?: Maybe<String>;
  zone_contains?: Maybe<String>;
  zone_not_contains?: Maybe<String>;
  zone_starts_with?: Maybe<String>;
  zone_not_starts_with?: Maybe<String>;
  zone_ends_with?: Maybe<String>;
  zone_not_ends_with?: Maybe<String>;
  price?: Maybe<String>;
  price_not?: Maybe<String>;
  price_in?: Maybe<String[] | String>;
  price_not_in?: Maybe<String[] | String>;
  price_lt?: Maybe<String>;
  price_lte?: Maybe<String>;
  price_gt?: Maybe<String>;
  price_gte?: Maybe<String>;
  price_contains?: Maybe<String>;
  price_not_contains?: Maybe<String>;
  price_starts_with?: Maybe<String>;
  price_not_starts_with?: Maybe<String>;
  price_ends_with?: Maybe<String>;
  price_not_ends_with?: Maybe<String>;
  deposit?: Maybe<String>;
  deposit_not?: Maybe<String>;
  deposit_in?: Maybe<String[] | String>;
  deposit_not_in?: Maybe<String[] | String>;
  deposit_lt?: Maybe<String>;
  deposit_lte?: Maybe<String>;
  deposit_gt?: Maybe<String>;
  deposit_gte?: Maybe<String>;
  deposit_contains?: Maybe<String>;
  deposit_not_contains?: Maybe<String>;
  deposit_starts_with?: Maybe<String>;
  deposit_not_starts_with?: Maybe<String>;
  deposit_ends_with?: Maybe<String>;
  deposit_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  condition?: Maybe<String>;
  condition_not?: Maybe<String>;
  condition_in?: Maybe<String[] | String>;
  condition_not_in?: Maybe<String[] | String>;
  condition_lt?: Maybe<String>;
  condition_lte?: Maybe<String>;
  condition_gt?: Maybe<String>;
  condition_gte?: Maybe<String>;
  condition_contains?: Maybe<String>;
  condition_not_contains?: Maybe<String>;
  condition_starts_with?: Maybe<String>;
  condition_not_starts_with?: Maybe<String>;
  condition_ends_with?: Maybe<String>;
  condition_not_ends_with?: Maybe<String>;
  thumbnail?: Maybe<String>;
  thumbnail_not?: Maybe<String>;
  thumbnail_in?: Maybe<String[] | String>;
  thumbnail_not_in?: Maybe<String[] | String>;
  thumbnail_lt?: Maybe<String>;
  thumbnail_lte?: Maybe<String>;
  thumbnail_gt?: Maybe<String>;
  thumbnail_gte?: Maybe<String>;
  thumbnail_contains?: Maybe<String>;
  thumbnail_not_contains?: Maybe<String>;
  thumbnail_starts_with?: Maybe<String>;
  thumbnail_not_starts_with?: Maybe<String>;
  thumbnail_ends_with?: Maybe<String>;
  thumbnail_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RentWhereInput[] | RentWhereInput>;
  OR?: Maybe<RentWhereInput[] | RentWhereInput>;
  NOT?: Maybe<RentWhereInput[] | RentWhereInput>;
}

export interface InfoWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  images_every?: Maybe<ImageWhereInput>;
  images_some?: Maybe<ImageWhereInput>;
  images_none?: Maybe<ImageWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<InfoWhereInput[] | InfoWhereInput>;
  OR?: Maybe<InfoWhereInput[] | InfoWhereInput>;
  NOT?: Maybe<InfoWhereInput[] | InfoWhereInput>;
}

export interface RoomWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  participants_every?: Maybe<UserWhereInput>;
  participants_some?: Maybe<UserWhereInput>;
  participants_none?: Maybe<UserWhereInput>;
  messages_every?: Maybe<MessageWhereInput>;
  messages_some?: Maybe<MessageWhereInput>;
  messages_none?: Maybe<MessageWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RoomWhereInput[] | RoomWhereInput>;
  OR?: Maybe<RoomWhereInput[] | RoomWhereInput>;
  NOT?: Maybe<RoomWhereInput[] | RoomWhereInput>;
}

export interface MessageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  from?: Maybe<UserWhereInput>;
  to?: Maybe<UserWhereInput>;
  room?: Maybe<RoomWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  OR?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  NOT?: Maybe<MessageWhereInput[] | MessageWhereInput>;
}

export interface ScheduleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  todo?: Maybe<String>;
  todo_not?: Maybe<String>;
  todo_in?: Maybe<String[] | String>;
  todo_not_in?: Maybe<String[] | String>;
  todo_lt?: Maybe<String>;
  todo_lte?: Maybe<String>;
  todo_gt?: Maybe<String>;
  todo_gte?: Maybe<String>;
  todo_contains?: Maybe<String>;
  todo_not_contains?: Maybe<String>;
  todo_starts_with?: Maybe<String>;
  todo_not_starts_with?: Maybe<String>;
  todo_ends_with?: Maybe<String>;
  todo_not_ends_with?: Maybe<String>;
  tag?: Maybe<String>;
  tag_not?: Maybe<String>;
  tag_in?: Maybe<String[] | String>;
  tag_not_in?: Maybe<String[] | String>;
  tag_lt?: Maybe<String>;
  tag_lte?: Maybe<String>;
  tag_gt?: Maybe<String>;
  tag_gte?: Maybe<String>;
  tag_contains?: Maybe<String>;
  tag_not_contains?: Maybe<String>;
  tag_starts_with?: Maybe<String>;
  tag_not_starts_with?: Maybe<String>;
  tag_ends_with?: Maybe<String>;
  tag_not_ends_with?: Maybe<String>;
  isOn?: Maybe<Boolean>;
  isOn_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ScheduleWhereInput[] | ScheduleWhereInput>;
  OR?: Maybe<ScheduleWhereInput[] | ScheduleWhereInput>;
  NOT?: Maybe<ScheduleWhereInput[] | ScheduleWhereInput>;
}

export interface NoticeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<NoticeWhereInput[] | NoticeWhereInput>;
  OR?: Maybe<NoticeWhereInput[] | NoticeWhereInput>;
  NOT?: Maybe<NoticeWhereInput[] | NoticeWhereInput>;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ImageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type InfoWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MarketWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MeetWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MessageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type NoticeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type RentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type RoomWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ScheduleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TagWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  username?: Maybe<String>;
}>;

export interface BoardCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutBoardsInput;
  title: String;
  caption: String;
  category: String;
  comments?: Maybe<CommentCreateManyWithoutBoardInput>;
}

export interface UserCreateOneWithoutBoardsInput {
  create?: Maybe<UserCreateWithoutBoardsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutBoardsInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  email: String;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username: String;
  intro?: Maybe<String>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  markets?: Maybe<MarketCreateManyWithoutUserInput>;
  rents?: Maybe<RentCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  meets?: Maybe<MeetCreateManyWithoutParticipantsInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  schedules?: Maybe<ScheduleCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface PostCreateManyWithoutUserInput {
  create?: Maybe<PostCreateWithoutUserInput[] | PostCreateWithoutUserInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  notices?: Maybe<NoticeCreateManyInput>;
  markgets?: Maybe<MarketCreateManyInput>;
  boards?: Maybe<BoardCreateManyInput>;
  rents?: Maybe<RentCreateManyInput>;
}

export interface NoticeCreateManyInput {
  create?: Maybe<NoticeCreateInput[] | NoticeCreateInput>;
  connect?: Maybe<NoticeWhereUniqueInput[] | NoticeWhereUniqueInput>;
}

export interface NoticeCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  title: String;
  caption: String;
  comments?: Maybe<CommentCreateManyInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  email: String;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username: String;
  intro?: Maybe<String>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  boards?: Maybe<BoardCreateManyWithoutUserInput>;
  markets?: Maybe<MarketCreateManyWithoutUserInput>;
  rents?: Maybe<RentCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  meets?: Maybe<MeetCreateManyWithoutParticipantsInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  schedules?: Maybe<ScheduleCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface BoardCreateManyWithoutUserInput {
  create?: Maybe<BoardCreateWithoutUserInput[] | BoardCreateWithoutUserInput>;
  connect?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
}

export interface BoardCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  title: String;
  caption: String;
  category: String;
  comments?: Maybe<CommentCreateManyWithoutBoardInput>;
}

export interface CommentCreateManyWithoutBoardInput {
  create?: Maybe<
    CommentCreateWithoutBoardInput[] | CommentCreateWithoutBoardInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutBoardInput {
  id?: Maybe<ID_Input>;
  text: String;
  user?: Maybe<UserCreateOneWithoutCommentsInput>;
}

export interface UserCreateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  email: String;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username: String;
  intro?: Maybe<String>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  boards?: Maybe<BoardCreateManyWithoutUserInput>;
  markets?: Maybe<MarketCreateManyWithoutUserInput>;
  rents?: Maybe<RentCreateManyWithoutUserInput>;
  meets?: Maybe<MeetCreateManyWithoutParticipantsInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  schedules?: Maybe<ScheduleCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface MarketCreateManyWithoutUserInput {
  create?: Maybe<MarketCreateWithoutUserInput[] | MarketCreateWithoutUserInput>;
  connect?: Maybe<MarketWhereUniqueInput[] | MarketWhereUniqueInput>;
}

export interface MarketCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  title: String;
  caption: String;
  status: String;
  price: String;
  thumbnail?: Maybe<String>;
  images?: Maybe<ImageCreateManyWithoutMarketInput>;
}

export interface ImageCreateManyWithoutMarketInput {
  create?: Maybe<
    ImageCreateWithoutMarketInput[] | ImageCreateWithoutMarketInput
  >;
  connect?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
}

export interface ImageCreateWithoutMarketInput {
  id?: Maybe<ID_Input>;
  url: String;
  meet?: Maybe<MeetCreateOneWithoutImagesInput>;
  rent?: Maybe<RentCreateOneWithoutImagesInput>;
  info?: Maybe<InfoCreateOneWithoutImagesInput>;
}

export interface MeetCreateOneWithoutImagesInput {
  create?: Maybe<MeetCreateWithoutImagesInput>;
  connect?: Maybe<MeetWhereUniqueInput>;
}

export interface MeetCreateWithoutImagesInput {
  id?: Maybe<ID_Input>;
  intro: String;
  title: String;
  creator?: Maybe<String>;
  location?: Maybe<String>;
  date: String;
  time: String;
  isPublic: Boolean;
  member?: Maybe<Int>;
  thumbnail?: Maybe<String>;
  theme: String;
  participants?: Maybe<UserCreateManyWithoutMeetsInput>;
  tags?: Maybe<TagCreateManyWithoutMeetsInput>;
}

export interface UserCreateManyWithoutMeetsInput {
  create?: Maybe<UserCreateWithoutMeetsInput[] | UserCreateWithoutMeetsInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutMeetsInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  email: String;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username: String;
  intro?: Maybe<String>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  boards?: Maybe<BoardCreateManyWithoutUserInput>;
  markets?: Maybe<MarketCreateManyWithoutUserInput>;
  rents?: Maybe<RentCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  schedules?: Maybe<ScheduleCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface RentCreateManyWithoutUserInput {
  create?: Maybe<RentCreateWithoutUserInput[] | RentCreateWithoutUserInput>;
  connect?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
}

export interface RentCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  title: String;
  caption: String;
  images?: Maybe<ImageCreateManyWithoutRentInput>;
  status: String;
  size: String;
  zone: String;
  price: String;
  deposit: String;
  type: String;
  address: String;
  condition: String;
  thumbnail?: Maybe<String>;
}

export interface ImageCreateManyWithoutRentInput {
  create?: Maybe<ImageCreateWithoutRentInput[] | ImageCreateWithoutRentInput>;
  connect?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
}

export interface ImageCreateWithoutRentInput {
  id?: Maybe<ID_Input>;
  url: String;
  meet?: Maybe<MeetCreateOneWithoutImagesInput>;
  market?: Maybe<MarketCreateOneWithoutImagesInput>;
  info?: Maybe<InfoCreateOneWithoutImagesInput>;
}

export interface MarketCreateOneWithoutImagesInput {
  create?: Maybe<MarketCreateWithoutImagesInput>;
  connect?: Maybe<MarketWhereUniqueInput>;
}

export interface MarketCreateWithoutImagesInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutMarketsInput;
  title: String;
  caption: String;
  status: String;
  price: String;
  thumbnail?: Maybe<String>;
}

export interface UserCreateOneWithoutMarketsInput {
  create?: Maybe<UserCreateWithoutMarketsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutMarketsInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  email: String;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username: String;
  intro?: Maybe<String>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  boards?: Maybe<BoardCreateManyWithoutUserInput>;
  rents?: Maybe<RentCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  meets?: Maybe<MeetCreateManyWithoutParticipantsInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  schedules?: Maybe<ScheduleCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface CommentCreateManyWithoutUserInput {
  create?: Maybe<
    CommentCreateWithoutUserInput[] | CommentCreateWithoutUserInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  text: String;
  board?: Maybe<BoardCreateOneWithoutCommentsInput>;
}

export interface BoardCreateOneWithoutCommentsInput {
  create?: Maybe<BoardCreateWithoutCommentsInput>;
  connect?: Maybe<BoardWhereUniqueInput>;
}

export interface BoardCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutBoardsInput;
  title: String;
  caption: String;
  category: String;
}

export interface MeetCreateManyWithoutParticipantsInput {
  create?: Maybe<
    MeetCreateWithoutParticipantsInput[] | MeetCreateWithoutParticipantsInput
  >;
  connect?: Maybe<MeetWhereUniqueInput[] | MeetWhereUniqueInput>;
}

export interface MeetCreateWithoutParticipantsInput {
  id?: Maybe<ID_Input>;
  intro: String;
  title: String;
  creator?: Maybe<String>;
  location?: Maybe<String>;
  date: String;
  time: String;
  isPublic: Boolean;
  member?: Maybe<Int>;
  thumbnail?: Maybe<String>;
  theme: String;
  images?: Maybe<ImageCreateManyWithoutMeetInput>;
  tags?: Maybe<TagCreateManyWithoutMeetsInput>;
}

export interface ImageCreateManyWithoutMeetInput {
  create?: Maybe<ImageCreateWithoutMeetInput[] | ImageCreateWithoutMeetInput>;
  connect?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
}

export interface ImageCreateWithoutMeetInput {
  id?: Maybe<ID_Input>;
  url: String;
  market?: Maybe<MarketCreateOneWithoutImagesInput>;
  rent?: Maybe<RentCreateOneWithoutImagesInput>;
  info?: Maybe<InfoCreateOneWithoutImagesInput>;
}

export interface RentCreateOneWithoutImagesInput {
  create?: Maybe<RentCreateWithoutImagesInput>;
  connect?: Maybe<RentWhereUniqueInput>;
}

export interface RentCreateWithoutImagesInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutRentsInput;
  title: String;
  caption: String;
  status: String;
  size: String;
  zone: String;
  price: String;
  deposit: String;
  type: String;
  address: String;
  condition: String;
  thumbnail?: Maybe<String>;
}

export interface UserCreateOneWithoutRentsInput {
  create?: Maybe<UserCreateWithoutRentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutRentsInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  email: String;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username: String;
  intro?: Maybe<String>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  boards?: Maybe<BoardCreateManyWithoutUserInput>;
  markets?: Maybe<MarketCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  meets?: Maybe<MeetCreateManyWithoutParticipantsInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  schedules?: Maybe<ScheduleCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface UserCreateManyWithoutFollowersInput {
  create?: Maybe<
    UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutFollowersInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  email: String;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username: String;
  intro?: Maybe<String>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  boards?: Maybe<BoardCreateManyWithoutUserInput>;
  markets?: Maybe<MarketCreateManyWithoutUserInput>;
  rents?: Maybe<RentCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  meets?: Maybe<MeetCreateManyWithoutParticipantsInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  schedules?: Maybe<ScheduleCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface RoomCreateManyWithoutParticipantsInput {
  create?: Maybe<
    RoomCreateWithoutParticipantsInput[] | RoomCreateWithoutParticipantsInput
  >;
  connect?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
}

export interface RoomCreateWithoutParticipantsInput {
  id?: Maybe<ID_Input>;
  messages?: Maybe<MessageCreateManyWithoutRoomInput>;
}

export interface MessageCreateManyWithoutRoomInput {
  create?: Maybe<
    MessageCreateWithoutRoomInput[] | MessageCreateWithoutRoomInput
  >;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
}

export interface MessageCreateWithoutRoomInput {
  id?: Maybe<ID_Input>;
  text: String;
  from: UserCreateOneInput;
  to: UserCreateOneInput;
}

export interface ScheduleCreateManyWithoutUserInput {
  create?: Maybe<
    ScheduleCreateWithoutUserInput[] | ScheduleCreateWithoutUserInput
  >;
  connect?: Maybe<ScheduleWhereUniqueInput[] | ScheduleWhereUniqueInput>;
}

export interface ScheduleCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  date: String;
  todo: String;
  tag?: Maybe<String>;
  isOn: Boolean;
}

export interface UserCreateManyWithoutFollowingInput {
  create?: Maybe<
    UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutFollowingInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  email: String;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username: String;
  intro?: Maybe<String>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  boards?: Maybe<BoardCreateManyWithoutUserInput>;
  markets?: Maybe<MarketCreateManyWithoutUserInput>;
  rents?: Maybe<RentCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  meets?: Maybe<MeetCreateManyWithoutParticipantsInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  schedules?: Maybe<ScheduleCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface InfoCreateOneWithoutImagesInput {
  create?: Maybe<InfoCreateWithoutImagesInput>;
  connect?: Maybe<InfoWhereUniqueInput>;
}

export interface InfoCreateWithoutImagesInput {
  id?: Maybe<ID_Input>;
  title: String;
  text: String;
}

export interface TagCreateManyWithoutMeetsInput {
  create?: Maybe<TagCreateWithoutMeetsInput[] | TagCreateWithoutMeetsInput>;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
}

export interface TagCreateWithoutMeetsInput {
  id?: Maybe<ID_Input>;
  title: String;
}

export interface CommentCreateManyInput {
  create?: Maybe<CommentCreateInput[] | CommentCreateInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  user?: Maybe<UserCreateOneWithoutCommentsInput>;
  board?: Maybe<BoardCreateOneWithoutCommentsInput>;
}

export interface MarketCreateManyInput {
  create?: Maybe<MarketCreateInput[] | MarketCreateInput>;
  connect?: Maybe<MarketWhereUniqueInput[] | MarketWhereUniqueInput>;
}

export interface MarketCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutMarketsInput;
  title: String;
  caption: String;
  status: String;
  price: String;
  thumbnail?: Maybe<String>;
  images?: Maybe<ImageCreateManyWithoutMarketInput>;
}

export interface BoardCreateManyInput {
  create?: Maybe<BoardCreateInput[] | BoardCreateInput>;
  connect?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
}

export interface RentCreateManyInput {
  create?: Maybe<RentCreateInput[] | RentCreateInput>;
  connect?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
}

export interface RentCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutRentsInput;
  title: String;
  caption: String;
  images?: Maybe<ImageCreateManyWithoutRentInput>;
  status: String;
  size: String;
  zone: String;
  price: String;
  deposit: String;
  type: String;
  address: String;
  condition: String;
  thumbnail?: Maybe<String>;
}

export interface BoardUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutBoardsInput>;
  title?: Maybe<String>;
  caption?: Maybe<String>;
  category?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutBoardInput>;
}

export interface UserUpdateOneRequiredWithoutBoardsInput {
  create?: Maybe<UserCreateWithoutBoardsInput>;
  update?: Maybe<UserUpdateWithoutBoardsDataInput>;
  upsert?: Maybe<UserUpsertWithoutBoardsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutBoardsDataInput {
  avatar?: Maybe<String>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username?: Maybe<String>;
  intro?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  markets?: Maybe<MarketUpdateManyWithoutUserInput>;
  rents?: Maybe<RentUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  meets?: Maybe<MeetUpdateManyWithoutParticipantsInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  schedules?: Maybe<ScheduleUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface PostUpdateManyWithoutUserInput {
  create?: Maybe<PostCreateWithoutUserInput[] | PostCreateWithoutUserInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutUserInput[]
    | PostUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutUserInput[]
    | PostUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface PostUpdateWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutUserDataInput;
}

export interface PostUpdateWithoutUserDataInput {
  notices?: Maybe<NoticeUpdateManyInput>;
  markgets?: Maybe<MarketUpdateManyInput>;
  boards?: Maybe<BoardUpdateManyInput>;
  rents?: Maybe<RentUpdateManyInput>;
}

export interface NoticeUpdateManyInput {
  create?: Maybe<NoticeCreateInput[] | NoticeCreateInput>;
  update?: Maybe<
    | NoticeUpdateWithWhereUniqueNestedInput[]
    | NoticeUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | NoticeUpsertWithWhereUniqueNestedInput[]
    | NoticeUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<NoticeWhereUniqueInput[] | NoticeWhereUniqueInput>;
  connect?: Maybe<NoticeWhereUniqueInput[] | NoticeWhereUniqueInput>;
  set?: Maybe<NoticeWhereUniqueInput[] | NoticeWhereUniqueInput>;
  disconnect?: Maybe<NoticeWhereUniqueInput[] | NoticeWhereUniqueInput>;
  deleteMany?: Maybe<NoticeScalarWhereInput[] | NoticeScalarWhereInput>;
  updateMany?: Maybe<
    | NoticeUpdateManyWithWhereNestedInput[]
    | NoticeUpdateManyWithWhereNestedInput
  >;
}

export interface NoticeUpdateWithWhereUniqueNestedInput {
  where: NoticeWhereUniqueInput;
  data: NoticeUpdateDataInput;
}

export interface NoticeUpdateDataInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  title?: Maybe<String>;
  caption?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  avatar?: Maybe<String>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username?: Maybe<String>;
  intro?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  boards?: Maybe<BoardUpdateManyWithoutUserInput>;
  markets?: Maybe<MarketUpdateManyWithoutUserInput>;
  rents?: Maybe<RentUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  meets?: Maybe<MeetUpdateManyWithoutParticipantsInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  schedules?: Maybe<ScheduleUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface BoardUpdateManyWithoutUserInput {
  create?: Maybe<BoardCreateWithoutUserInput[] | BoardCreateWithoutUserInput>;
  delete?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  connect?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  set?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  disconnect?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  update?: Maybe<
    | BoardUpdateWithWhereUniqueWithoutUserInput[]
    | BoardUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | BoardUpsertWithWhereUniqueWithoutUserInput[]
    | BoardUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<BoardScalarWhereInput[] | BoardScalarWhereInput>;
  updateMany?: Maybe<
    BoardUpdateManyWithWhereNestedInput[] | BoardUpdateManyWithWhereNestedInput
  >;
}

export interface BoardUpdateWithWhereUniqueWithoutUserInput {
  where: BoardWhereUniqueInput;
  data: BoardUpdateWithoutUserDataInput;
}

export interface BoardUpdateWithoutUserDataInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
  category?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutBoardInput>;
}

export interface CommentUpdateManyWithoutBoardInput {
  create?: Maybe<
    CommentCreateWithoutBoardInput[] | CommentCreateWithoutBoardInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutBoardInput[]
    | CommentUpdateWithWhereUniqueWithoutBoardInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutBoardInput[]
    | CommentUpsertWithWhereUniqueWithoutBoardInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutBoardInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutBoardDataInput;
}

export interface CommentUpdateWithoutBoardDataInput {
  text?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutCommentsInput>;
}

export interface UserUpdateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  update?: Maybe<UserUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCommentsDataInput {
  avatar?: Maybe<String>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username?: Maybe<String>;
  intro?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  boards?: Maybe<BoardUpdateManyWithoutUserInput>;
  markets?: Maybe<MarketUpdateManyWithoutUserInput>;
  rents?: Maybe<RentUpdateManyWithoutUserInput>;
  meets?: Maybe<MeetUpdateManyWithoutParticipantsInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  schedules?: Maybe<ScheduleUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface MarketUpdateManyWithoutUserInput {
  create?: Maybe<MarketCreateWithoutUserInput[] | MarketCreateWithoutUserInput>;
  delete?: Maybe<MarketWhereUniqueInput[] | MarketWhereUniqueInput>;
  connect?: Maybe<MarketWhereUniqueInput[] | MarketWhereUniqueInput>;
  set?: Maybe<MarketWhereUniqueInput[] | MarketWhereUniqueInput>;
  disconnect?: Maybe<MarketWhereUniqueInput[] | MarketWhereUniqueInput>;
  update?: Maybe<
    | MarketUpdateWithWhereUniqueWithoutUserInput[]
    | MarketUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | MarketUpsertWithWhereUniqueWithoutUserInput[]
    | MarketUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<MarketScalarWhereInput[] | MarketScalarWhereInput>;
  updateMany?: Maybe<
    | MarketUpdateManyWithWhereNestedInput[]
    | MarketUpdateManyWithWhereNestedInput
  >;
}

export interface MarketUpdateWithWhereUniqueWithoutUserInput {
  where: MarketWhereUniqueInput;
  data: MarketUpdateWithoutUserDataInput;
}

export interface MarketUpdateWithoutUserDataInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
  status?: Maybe<String>;
  price?: Maybe<String>;
  thumbnail?: Maybe<String>;
  images?: Maybe<ImageUpdateManyWithoutMarketInput>;
}

export interface ImageUpdateManyWithoutMarketInput {
  create?: Maybe<
    ImageCreateWithoutMarketInput[] | ImageCreateWithoutMarketInput
  >;
  delete?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  connect?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  set?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  disconnect?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  update?: Maybe<
    | ImageUpdateWithWhereUniqueWithoutMarketInput[]
    | ImageUpdateWithWhereUniqueWithoutMarketInput
  >;
  upsert?: Maybe<
    | ImageUpsertWithWhereUniqueWithoutMarketInput[]
    | ImageUpsertWithWhereUniqueWithoutMarketInput
  >;
  deleteMany?: Maybe<ImageScalarWhereInput[] | ImageScalarWhereInput>;
  updateMany?: Maybe<
    ImageUpdateManyWithWhereNestedInput[] | ImageUpdateManyWithWhereNestedInput
  >;
}

export interface ImageUpdateWithWhereUniqueWithoutMarketInput {
  where: ImageWhereUniqueInput;
  data: ImageUpdateWithoutMarketDataInput;
}

export interface ImageUpdateWithoutMarketDataInput {
  url?: Maybe<String>;
  meet?: Maybe<MeetUpdateOneWithoutImagesInput>;
  rent?: Maybe<RentUpdateOneWithoutImagesInput>;
  info?: Maybe<InfoUpdateOneWithoutImagesInput>;
}

export interface MeetUpdateOneWithoutImagesInput {
  create?: Maybe<MeetCreateWithoutImagesInput>;
  update?: Maybe<MeetUpdateWithoutImagesDataInput>;
  upsert?: Maybe<MeetUpsertWithoutImagesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<MeetWhereUniqueInput>;
}

export interface MeetUpdateWithoutImagesDataInput {
  intro?: Maybe<String>;
  title?: Maybe<String>;
  creator?: Maybe<String>;
  location?: Maybe<String>;
  date?: Maybe<String>;
  time?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  member?: Maybe<Int>;
  thumbnail?: Maybe<String>;
  theme?: Maybe<String>;
  participants?: Maybe<UserUpdateManyWithoutMeetsInput>;
  tags?: Maybe<TagUpdateManyWithoutMeetsInput>;
}

export interface UserUpdateManyWithoutMeetsInput {
  create?: Maybe<UserCreateWithoutMeetsInput[] | UserCreateWithoutMeetsInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutMeetsInput[]
    | UserUpdateWithWhereUniqueWithoutMeetsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutMeetsInput[]
    | UserUpsertWithWhereUniqueWithoutMeetsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutMeetsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutMeetsDataInput;
}

export interface UserUpdateWithoutMeetsDataInput {
  avatar?: Maybe<String>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username?: Maybe<String>;
  intro?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  boards?: Maybe<BoardUpdateManyWithoutUserInput>;
  markets?: Maybe<MarketUpdateManyWithoutUserInput>;
  rents?: Maybe<RentUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  schedules?: Maybe<ScheduleUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface RentUpdateManyWithoutUserInput {
  create?: Maybe<RentCreateWithoutUserInput[] | RentCreateWithoutUserInput>;
  delete?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
  connect?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
  set?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
  disconnect?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
  update?: Maybe<
    | RentUpdateWithWhereUniqueWithoutUserInput[]
    | RentUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | RentUpsertWithWhereUniqueWithoutUserInput[]
    | RentUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<RentScalarWhereInput[] | RentScalarWhereInput>;
  updateMany?: Maybe<
    RentUpdateManyWithWhereNestedInput[] | RentUpdateManyWithWhereNestedInput
  >;
}

export interface RentUpdateWithWhereUniqueWithoutUserInput {
  where: RentWhereUniqueInput;
  data: RentUpdateWithoutUserDataInput;
}

export interface RentUpdateWithoutUserDataInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
  images?: Maybe<ImageUpdateManyWithoutRentInput>;
  status?: Maybe<String>;
  size?: Maybe<String>;
  zone?: Maybe<String>;
  price?: Maybe<String>;
  deposit?: Maybe<String>;
  type?: Maybe<String>;
  address?: Maybe<String>;
  condition?: Maybe<String>;
  thumbnail?: Maybe<String>;
}

export interface ImageUpdateManyWithoutRentInput {
  create?: Maybe<ImageCreateWithoutRentInput[] | ImageCreateWithoutRentInput>;
  delete?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  connect?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  set?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  disconnect?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  update?: Maybe<
    | ImageUpdateWithWhereUniqueWithoutRentInput[]
    | ImageUpdateWithWhereUniqueWithoutRentInput
  >;
  upsert?: Maybe<
    | ImageUpsertWithWhereUniqueWithoutRentInput[]
    | ImageUpsertWithWhereUniqueWithoutRentInput
  >;
  deleteMany?: Maybe<ImageScalarWhereInput[] | ImageScalarWhereInput>;
  updateMany?: Maybe<
    ImageUpdateManyWithWhereNestedInput[] | ImageUpdateManyWithWhereNestedInput
  >;
}

export interface ImageUpdateWithWhereUniqueWithoutRentInput {
  where: ImageWhereUniqueInput;
  data: ImageUpdateWithoutRentDataInput;
}

export interface ImageUpdateWithoutRentDataInput {
  url?: Maybe<String>;
  meet?: Maybe<MeetUpdateOneWithoutImagesInput>;
  market?: Maybe<MarketUpdateOneWithoutImagesInput>;
  info?: Maybe<InfoUpdateOneWithoutImagesInput>;
}

export interface MarketUpdateOneWithoutImagesInput {
  create?: Maybe<MarketCreateWithoutImagesInput>;
  update?: Maybe<MarketUpdateWithoutImagesDataInput>;
  upsert?: Maybe<MarketUpsertWithoutImagesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<MarketWhereUniqueInput>;
}

export interface MarketUpdateWithoutImagesDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutMarketsInput>;
  title?: Maybe<String>;
  caption?: Maybe<String>;
  status?: Maybe<String>;
  price?: Maybe<String>;
  thumbnail?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutMarketsInput {
  create?: Maybe<UserCreateWithoutMarketsInput>;
  update?: Maybe<UserUpdateWithoutMarketsDataInput>;
  upsert?: Maybe<UserUpsertWithoutMarketsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutMarketsDataInput {
  avatar?: Maybe<String>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username?: Maybe<String>;
  intro?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  boards?: Maybe<BoardUpdateManyWithoutUserInput>;
  rents?: Maybe<RentUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  meets?: Maybe<MeetUpdateManyWithoutParticipantsInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  schedules?: Maybe<ScheduleUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface CommentUpdateManyWithoutUserInput {
  create?: Maybe<
    CommentCreateWithoutUserInput[] | CommentCreateWithoutUserInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutUserInput[]
    | CommentUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutUserInput[]
    | CommentUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutUserDataInput;
}

export interface CommentUpdateWithoutUserDataInput {
  text?: Maybe<String>;
  board?: Maybe<BoardUpdateOneWithoutCommentsInput>;
}

export interface BoardUpdateOneWithoutCommentsInput {
  create?: Maybe<BoardCreateWithoutCommentsInput>;
  update?: Maybe<BoardUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<BoardUpsertWithoutCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<BoardWhereUniqueInput>;
}

export interface BoardUpdateWithoutCommentsDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutBoardsInput>;
  title?: Maybe<String>;
  caption?: Maybe<String>;
  category?: Maybe<String>;
}

export interface BoardUpsertWithoutCommentsInput {
  update: BoardUpdateWithoutCommentsDataInput;
  create: BoardCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutUserDataInput;
  create: CommentCreateWithoutUserInput;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface MeetUpdateManyWithoutParticipantsInput {
  create?: Maybe<
    MeetCreateWithoutParticipantsInput[] | MeetCreateWithoutParticipantsInput
  >;
  delete?: Maybe<MeetWhereUniqueInput[] | MeetWhereUniqueInput>;
  connect?: Maybe<MeetWhereUniqueInput[] | MeetWhereUniqueInput>;
  set?: Maybe<MeetWhereUniqueInput[] | MeetWhereUniqueInput>;
  disconnect?: Maybe<MeetWhereUniqueInput[] | MeetWhereUniqueInput>;
  update?: Maybe<
    | MeetUpdateWithWhereUniqueWithoutParticipantsInput[]
    | MeetUpdateWithWhereUniqueWithoutParticipantsInput
  >;
  upsert?: Maybe<
    | MeetUpsertWithWhereUniqueWithoutParticipantsInput[]
    | MeetUpsertWithWhereUniqueWithoutParticipantsInput
  >;
  deleteMany?: Maybe<MeetScalarWhereInput[] | MeetScalarWhereInput>;
  updateMany?: Maybe<
    MeetUpdateManyWithWhereNestedInput[] | MeetUpdateManyWithWhereNestedInput
  >;
}

export interface MeetUpdateWithWhereUniqueWithoutParticipantsInput {
  where: MeetWhereUniqueInput;
  data: MeetUpdateWithoutParticipantsDataInput;
}

export interface MeetUpdateWithoutParticipantsDataInput {
  intro?: Maybe<String>;
  title?: Maybe<String>;
  creator?: Maybe<String>;
  location?: Maybe<String>;
  date?: Maybe<String>;
  time?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  member?: Maybe<Int>;
  thumbnail?: Maybe<String>;
  theme?: Maybe<String>;
  images?: Maybe<ImageUpdateManyWithoutMeetInput>;
  tags?: Maybe<TagUpdateManyWithoutMeetsInput>;
}

export interface ImageUpdateManyWithoutMeetInput {
  create?: Maybe<ImageCreateWithoutMeetInput[] | ImageCreateWithoutMeetInput>;
  delete?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  connect?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  set?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  disconnect?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  update?: Maybe<
    | ImageUpdateWithWhereUniqueWithoutMeetInput[]
    | ImageUpdateWithWhereUniqueWithoutMeetInput
  >;
  upsert?: Maybe<
    | ImageUpsertWithWhereUniqueWithoutMeetInput[]
    | ImageUpsertWithWhereUniqueWithoutMeetInput
  >;
  deleteMany?: Maybe<ImageScalarWhereInput[] | ImageScalarWhereInput>;
  updateMany?: Maybe<
    ImageUpdateManyWithWhereNestedInput[] | ImageUpdateManyWithWhereNestedInput
  >;
}

export interface ImageUpdateWithWhereUniqueWithoutMeetInput {
  where: ImageWhereUniqueInput;
  data: ImageUpdateWithoutMeetDataInput;
}

export interface ImageUpdateWithoutMeetDataInput {
  url?: Maybe<String>;
  market?: Maybe<MarketUpdateOneWithoutImagesInput>;
  rent?: Maybe<RentUpdateOneWithoutImagesInput>;
  info?: Maybe<InfoUpdateOneWithoutImagesInput>;
}

export interface RentUpdateOneWithoutImagesInput {
  create?: Maybe<RentCreateWithoutImagesInput>;
  update?: Maybe<RentUpdateWithoutImagesDataInput>;
  upsert?: Maybe<RentUpsertWithoutImagesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<RentWhereUniqueInput>;
}

export interface RentUpdateWithoutImagesDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutRentsInput>;
  title?: Maybe<String>;
  caption?: Maybe<String>;
  status?: Maybe<String>;
  size?: Maybe<String>;
  zone?: Maybe<String>;
  price?: Maybe<String>;
  deposit?: Maybe<String>;
  type?: Maybe<String>;
  address?: Maybe<String>;
  condition?: Maybe<String>;
  thumbnail?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutRentsInput {
  create?: Maybe<UserCreateWithoutRentsInput>;
  update?: Maybe<UserUpdateWithoutRentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutRentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutRentsDataInput {
  avatar?: Maybe<String>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username?: Maybe<String>;
  intro?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  boards?: Maybe<BoardUpdateManyWithoutUserInput>;
  markets?: Maybe<MarketUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  meets?: Maybe<MeetUpdateManyWithoutParticipantsInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  schedules?: Maybe<ScheduleUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface UserUpdateManyWithoutFollowersInput {
  create?: Maybe<
    UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowersInput[]
    | UserUpdateWithWhereUniqueWithoutFollowersInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowersInput[]
    | UserUpsertWithWhereUniqueWithoutFollowersInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowersDataInput;
}

export interface UserUpdateWithoutFollowersDataInput {
  avatar?: Maybe<String>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username?: Maybe<String>;
  intro?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  boards?: Maybe<BoardUpdateManyWithoutUserInput>;
  markets?: Maybe<MarketUpdateManyWithoutUserInput>;
  rents?: Maybe<RentUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  meets?: Maybe<MeetUpdateManyWithoutParticipantsInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  schedules?: Maybe<ScheduleUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface RoomUpdateManyWithoutParticipantsInput {
  create?: Maybe<
    RoomCreateWithoutParticipantsInput[] | RoomCreateWithoutParticipantsInput
  >;
  delete?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  connect?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  set?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  disconnect?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  update?: Maybe<
    | RoomUpdateWithWhereUniqueWithoutParticipantsInput[]
    | RoomUpdateWithWhereUniqueWithoutParticipantsInput
  >;
  upsert?: Maybe<
    | RoomUpsertWithWhereUniqueWithoutParticipantsInput[]
    | RoomUpsertWithWhereUniqueWithoutParticipantsInput
  >;
  deleteMany?: Maybe<RoomScalarWhereInput[] | RoomScalarWhereInput>;
}

export interface RoomUpdateWithWhereUniqueWithoutParticipantsInput {
  where: RoomWhereUniqueInput;
  data: RoomUpdateWithoutParticipantsDataInput;
}

export interface RoomUpdateWithoutParticipantsDataInput {
  messages?: Maybe<MessageUpdateManyWithoutRoomInput>;
}

export interface MessageUpdateManyWithoutRoomInput {
  create?: Maybe<
    MessageCreateWithoutRoomInput[] | MessageCreateWithoutRoomInput
  >;
  delete?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  set?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  disconnect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  update?: Maybe<
    | MessageUpdateWithWhereUniqueWithoutRoomInput[]
    | MessageUpdateWithWhereUniqueWithoutRoomInput
  >;
  upsert?: Maybe<
    | MessageUpsertWithWhereUniqueWithoutRoomInput[]
    | MessageUpsertWithWhereUniqueWithoutRoomInput
  >;
  deleteMany?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  updateMany?: Maybe<
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput
  >;
}

export interface MessageUpdateWithWhereUniqueWithoutRoomInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutRoomDataInput;
}

export interface MessageUpdateWithoutRoomDataInput {
  text?: Maybe<String>;
  from?: Maybe<UserUpdateOneRequiredInput>;
  to?: Maybe<UserUpdateOneRequiredInput>;
}

export interface MessageUpsertWithWhereUniqueWithoutRoomInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutRoomDataInput;
  create: MessageCreateWithoutRoomInput;
}

export interface MessageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  OR?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  NOT?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
}

export interface MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput;
  data: MessageUpdateManyDataInput;
}

export interface MessageUpdateManyDataInput {
  text?: Maybe<String>;
}

export interface RoomUpsertWithWhereUniqueWithoutParticipantsInput {
  where: RoomWhereUniqueInput;
  update: RoomUpdateWithoutParticipantsDataInput;
  create: RoomCreateWithoutParticipantsInput;
}

export interface RoomScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RoomScalarWhereInput[] | RoomScalarWhereInput>;
  OR?: Maybe<RoomScalarWhereInput[] | RoomScalarWhereInput>;
  NOT?: Maybe<RoomScalarWhereInput[] | RoomScalarWhereInput>;
}

export interface ScheduleUpdateManyWithoutUserInput {
  create?: Maybe<
    ScheduleCreateWithoutUserInput[] | ScheduleCreateWithoutUserInput
  >;
  delete?: Maybe<ScheduleWhereUniqueInput[] | ScheduleWhereUniqueInput>;
  connect?: Maybe<ScheduleWhereUniqueInput[] | ScheduleWhereUniqueInput>;
  set?: Maybe<ScheduleWhereUniqueInput[] | ScheduleWhereUniqueInput>;
  disconnect?: Maybe<ScheduleWhereUniqueInput[] | ScheduleWhereUniqueInput>;
  update?: Maybe<
    | ScheduleUpdateWithWhereUniqueWithoutUserInput[]
    | ScheduleUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | ScheduleUpsertWithWhereUniqueWithoutUserInput[]
    | ScheduleUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<ScheduleScalarWhereInput[] | ScheduleScalarWhereInput>;
  updateMany?: Maybe<
    | ScheduleUpdateManyWithWhereNestedInput[]
    | ScheduleUpdateManyWithWhereNestedInput
  >;
}

export interface ScheduleUpdateWithWhereUniqueWithoutUserInput {
  where: ScheduleWhereUniqueInput;
  data: ScheduleUpdateWithoutUserDataInput;
}

export interface ScheduleUpdateWithoutUserDataInput {
  date?: Maybe<String>;
  todo?: Maybe<String>;
  tag?: Maybe<String>;
  isOn?: Maybe<Boolean>;
}

export interface ScheduleUpsertWithWhereUniqueWithoutUserInput {
  where: ScheduleWhereUniqueInput;
  update: ScheduleUpdateWithoutUserDataInput;
  create: ScheduleCreateWithoutUserInput;
}

export interface ScheduleScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  todo?: Maybe<String>;
  todo_not?: Maybe<String>;
  todo_in?: Maybe<String[] | String>;
  todo_not_in?: Maybe<String[] | String>;
  todo_lt?: Maybe<String>;
  todo_lte?: Maybe<String>;
  todo_gt?: Maybe<String>;
  todo_gte?: Maybe<String>;
  todo_contains?: Maybe<String>;
  todo_not_contains?: Maybe<String>;
  todo_starts_with?: Maybe<String>;
  todo_not_starts_with?: Maybe<String>;
  todo_ends_with?: Maybe<String>;
  todo_not_ends_with?: Maybe<String>;
  tag?: Maybe<String>;
  tag_not?: Maybe<String>;
  tag_in?: Maybe<String[] | String>;
  tag_not_in?: Maybe<String[] | String>;
  tag_lt?: Maybe<String>;
  tag_lte?: Maybe<String>;
  tag_gt?: Maybe<String>;
  tag_gte?: Maybe<String>;
  tag_contains?: Maybe<String>;
  tag_not_contains?: Maybe<String>;
  tag_starts_with?: Maybe<String>;
  tag_not_starts_with?: Maybe<String>;
  tag_ends_with?: Maybe<String>;
  tag_not_ends_with?: Maybe<String>;
  isOn?: Maybe<Boolean>;
  isOn_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ScheduleScalarWhereInput[] | ScheduleScalarWhereInput>;
  OR?: Maybe<ScheduleScalarWhereInput[] | ScheduleScalarWhereInput>;
  NOT?: Maybe<ScheduleScalarWhereInput[] | ScheduleScalarWhereInput>;
}

export interface ScheduleUpdateManyWithWhereNestedInput {
  where: ScheduleScalarWhereInput;
  data: ScheduleUpdateManyDataInput;
}

export interface ScheduleUpdateManyDataInput {
  date?: Maybe<String>;
  todo?: Maybe<String>;
  tag?: Maybe<String>;
  isOn?: Maybe<Boolean>;
}

export interface UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowersDataInput;
  create: UserCreateWithoutFollowersInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  intro?: Maybe<String>;
  intro_not?: Maybe<String>;
  intro_in?: Maybe<String[] | String>;
  intro_not_in?: Maybe<String[] | String>;
  intro_lt?: Maybe<String>;
  intro_lte?: Maybe<String>;
  intro_gt?: Maybe<String>;
  intro_gte?: Maybe<String>;
  intro_contains?: Maybe<String>;
  intro_not_contains?: Maybe<String>;
  intro_starts_with?: Maybe<String>;
  intro_not_starts_with?: Maybe<String>;
  intro_ends_with?: Maybe<String>;
  intro_not_ends_with?: Maybe<String>;
  loginSecret?: Maybe<String>;
  loginSecret_not?: Maybe<String>;
  loginSecret_in?: Maybe<String[] | String>;
  loginSecret_not_in?: Maybe<String[] | String>;
  loginSecret_lt?: Maybe<String>;
  loginSecret_lte?: Maybe<String>;
  loginSecret_gt?: Maybe<String>;
  loginSecret_gte?: Maybe<String>;
  loginSecret_contains?: Maybe<String>;
  loginSecret_not_contains?: Maybe<String>;
  loginSecret_starts_with?: Maybe<String>;
  loginSecret_not_starts_with?: Maybe<String>;
  loginSecret_ends_with?: Maybe<String>;
  loginSecret_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  avatar?: Maybe<String>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username?: Maybe<String>;
  intro?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface UserUpdateManyWithoutFollowingInput {
  create?: Maybe<
    UserCreateWithoutFollowingInput[] | UserCreateWithoutFollowingInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowingInput[]
    | UserUpdateWithWhereUniqueWithoutFollowingInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowingInput[]
    | UserUpsertWithWhereUniqueWithoutFollowingInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowingDataInput;
}

export interface UserUpdateWithoutFollowingDataInput {
  avatar?: Maybe<String>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username?: Maybe<String>;
  intro?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  boards?: Maybe<BoardUpdateManyWithoutUserInput>;
  markets?: Maybe<MarketUpdateManyWithoutUserInput>;
  rents?: Maybe<RentUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  meets?: Maybe<MeetUpdateManyWithoutParticipantsInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  schedules?: Maybe<ScheduleUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueWithoutFollowingInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowingDataInput;
  create: UserCreateWithoutFollowingInput;
}

export interface UserUpsertWithoutRentsInput {
  update: UserUpdateWithoutRentsDataInput;
  create: UserCreateWithoutRentsInput;
}

export interface RentUpsertWithoutImagesInput {
  update: RentUpdateWithoutImagesDataInput;
  create: RentCreateWithoutImagesInput;
}

export interface InfoUpdateOneWithoutImagesInput {
  create?: Maybe<InfoCreateWithoutImagesInput>;
  update?: Maybe<InfoUpdateWithoutImagesDataInput>;
  upsert?: Maybe<InfoUpsertWithoutImagesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<InfoWhereUniqueInput>;
}

export interface InfoUpdateWithoutImagesDataInput {
  title?: Maybe<String>;
  text?: Maybe<String>;
}

export interface InfoUpsertWithoutImagesInput {
  update: InfoUpdateWithoutImagesDataInput;
  create: InfoCreateWithoutImagesInput;
}

export interface ImageUpsertWithWhereUniqueWithoutMeetInput {
  where: ImageWhereUniqueInput;
  update: ImageUpdateWithoutMeetDataInput;
  create: ImageCreateWithoutMeetInput;
}

export interface ImageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ImageScalarWhereInput[] | ImageScalarWhereInput>;
  OR?: Maybe<ImageScalarWhereInput[] | ImageScalarWhereInput>;
  NOT?: Maybe<ImageScalarWhereInput[] | ImageScalarWhereInput>;
}

export interface ImageUpdateManyWithWhereNestedInput {
  where: ImageScalarWhereInput;
  data: ImageUpdateManyDataInput;
}

export interface ImageUpdateManyDataInput {
  url?: Maybe<String>;
}

export interface TagUpdateManyWithoutMeetsInput {
  create?: Maybe<TagCreateWithoutMeetsInput[] | TagCreateWithoutMeetsInput>;
  delete?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  set?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  disconnect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  update?: Maybe<
    | TagUpdateWithWhereUniqueWithoutMeetsInput[]
    | TagUpdateWithWhereUniqueWithoutMeetsInput
  >;
  upsert?: Maybe<
    | TagUpsertWithWhereUniqueWithoutMeetsInput[]
    | TagUpsertWithWhereUniqueWithoutMeetsInput
  >;
  deleteMany?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  updateMany?: Maybe<
    TagUpdateManyWithWhereNestedInput[] | TagUpdateManyWithWhereNestedInput
  >;
}

export interface TagUpdateWithWhereUniqueWithoutMeetsInput {
  where: TagWhereUniqueInput;
  data: TagUpdateWithoutMeetsDataInput;
}

export interface TagUpdateWithoutMeetsDataInput {
  title?: Maybe<String>;
}

export interface TagUpsertWithWhereUniqueWithoutMeetsInput {
  where: TagWhereUniqueInput;
  update: TagUpdateWithoutMeetsDataInput;
  create: TagCreateWithoutMeetsInput;
}

export interface TagScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  OR?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  NOT?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
}

export interface TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput;
  data: TagUpdateManyDataInput;
}

export interface TagUpdateManyDataInput {
  title?: Maybe<String>;
}

export interface MeetUpsertWithWhereUniqueWithoutParticipantsInput {
  where: MeetWhereUniqueInput;
  update: MeetUpdateWithoutParticipantsDataInput;
  create: MeetCreateWithoutParticipantsInput;
}

export interface MeetScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  intro?: Maybe<String>;
  intro_not?: Maybe<String>;
  intro_in?: Maybe<String[] | String>;
  intro_not_in?: Maybe<String[] | String>;
  intro_lt?: Maybe<String>;
  intro_lte?: Maybe<String>;
  intro_gt?: Maybe<String>;
  intro_gte?: Maybe<String>;
  intro_contains?: Maybe<String>;
  intro_not_contains?: Maybe<String>;
  intro_starts_with?: Maybe<String>;
  intro_not_starts_with?: Maybe<String>;
  intro_ends_with?: Maybe<String>;
  intro_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  creator?: Maybe<String>;
  creator_not?: Maybe<String>;
  creator_in?: Maybe<String[] | String>;
  creator_not_in?: Maybe<String[] | String>;
  creator_lt?: Maybe<String>;
  creator_lte?: Maybe<String>;
  creator_gt?: Maybe<String>;
  creator_gte?: Maybe<String>;
  creator_contains?: Maybe<String>;
  creator_not_contains?: Maybe<String>;
  creator_starts_with?: Maybe<String>;
  creator_not_starts_with?: Maybe<String>;
  creator_ends_with?: Maybe<String>;
  creator_not_ends_with?: Maybe<String>;
  location?: Maybe<String>;
  location_not?: Maybe<String>;
  location_in?: Maybe<String[] | String>;
  location_not_in?: Maybe<String[] | String>;
  location_lt?: Maybe<String>;
  location_lte?: Maybe<String>;
  location_gt?: Maybe<String>;
  location_gte?: Maybe<String>;
  location_contains?: Maybe<String>;
  location_not_contains?: Maybe<String>;
  location_starts_with?: Maybe<String>;
  location_not_starts_with?: Maybe<String>;
  location_ends_with?: Maybe<String>;
  location_not_ends_with?: Maybe<String>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  time?: Maybe<String>;
  time_not?: Maybe<String>;
  time_in?: Maybe<String[] | String>;
  time_not_in?: Maybe<String[] | String>;
  time_lt?: Maybe<String>;
  time_lte?: Maybe<String>;
  time_gt?: Maybe<String>;
  time_gte?: Maybe<String>;
  time_contains?: Maybe<String>;
  time_not_contains?: Maybe<String>;
  time_starts_with?: Maybe<String>;
  time_not_starts_with?: Maybe<String>;
  time_ends_with?: Maybe<String>;
  time_not_ends_with?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  isPublic_not?: Maybe<Boolean>;
  member?: Maybe<Int>;
  member_not?: Maybe<Int>;
  member_in?: Maybe<Int[] | Int>;
  member_not_in?: Maybe<Int[] | Int>;
  member_lt?: Maybe<Int>;
  member_lte?: Maybe<Int>;
  member_gt?: Maybe<Int>;
  member_gte?: Maybe<Int>;
  thumbnail?: Maybe<String>;
  thumbnail_not?: Maybe<String>;
  thumbnail_in?: Maybe<String[] | String>;
  thumbnail_not_in?: Maybe<String[] | String>;
  thumbnail_lt?: Maybe<String>;
  thumbnail_lte?: Maybe<String>;
  thumbnail_gt?: Maybe<String>;
  thumbnail_gte?: Maybe<String>;
  thumbnail_contains?: Maybe<String>;
  thumbnail_not_contains?: Maybe<String>;
  thumbnail_starts_with?: Maybe<String>;
  thumbnail_not_starts_with?: Maybe<String>;
  thumbnail_ends_with?: Maybe<String>;
  thumbnail_not_ends_with?: Maybe<String>;
  theme?: Maybe<String>;
  theme_not?: Maybe<String>;
  theme_in?: Maybe<String[] | String>;
  theme_not_in?: Maybe<String[] | String>;
  theme_lt?: Maybe<String>;
  theme_lte?: Maybe<String>;
  theme_gt?: Maybe<String>;
  theme_gte?: Maybe<String>;
  theme_contains?: Maybe<String>;
  theme_not_contains?: Maybe<String>;
  theme_starts_with?: Maybe<String>;
  theme_not_starts_with?: Maybe<String>;
  theme_ends_with?: Maybe<String>;
  theme_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MeetScalarWhereInput[] | MeetScalarWhereInput>;
  OR?: Maybe<MeetScalarWhereInput[] | MeetScalarWhereInput>;
  NOT?: Maybe<MeetScalarWhereInput[] | MeetScalarWhereInput>;
}

export interface MeetUpdateManyWithWhereNestedInput {
  where: MeetScalarWhereInput;
  data: MeetUpdateManyDataInput;
}

export interface MeetUpdateManyDataInput {
  intro?: Maybe<String>;
  title?: Maybe<String>;
  creator?: Maybe<String>;
  location?: Maybe<String>;
  date?: Maybe<String>;
  time?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  member?: Maybe<Int>;
  thumbnail?: Maybe<String>;
  theme?: Maybe<String>;
}

export interface UserUpsertWithoutMarketsInput {
  update: UserUpdateWithoutMarketsDataInput;
  create: UserCreateWithoutMarketsInput;
}

export interface MarketUpsertWithoutImagesInput {
  update: MarketUpdateWithoutImagesDataInput;
  create: MarketCreateWithoutImagesInput;
}

export interface ImageUpsertWithWhereUniqueWithoutRentInput {
  where: ImageWhereUniqueInput;
  update: ImageUpdateWithoutRentDataInput;
  create: ImageCreateWithoutRentInput;
}

export interface RentUpsertWithWhereUniqueWithoutUserInput {
  where: RentWhereUniqueInput;
  update: RentUpdateWithoutUserDataInput;
  create: RentCreateWithoutUserInput;
}

export interface RentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  size?: Maybe<String>;
  size_not?: Maybe<String>;
  size_in?: Maybe<String[] | String>;
  size_not_in?: Maybe<String[] | String>;
  size_lt?: Maybe<String>;
  size_lte?: Maybe<String>;
  size_gt?: Maybe<String>;
  size_gte?: Maybe<String>;
  size_contains?: Maybe<String>;
  size_not_contains?: Maybe<String>;
  size_starts_with?: Maybe<String>;
  size_not_starts_with?: Maybe<String>;
  size_ends_with?: Maybe<String>;
  size_not_ends_with?: Maybe<String>;
  zone?: Maybe<String>;
  zone_not?: Maybe<String>;
  zone_in?: Maybe<String[] | String>;
  zone_not_in?: Maybe<String[] | String>;
  zone_lt?: Maybe<String>;
  zone_lte?: Maybe<String>;
  zone_gt?: Maybe<String>;
  zone_gte?: Maybe<String>;
  zone_contains?: Maybe<String>;
  zone_not_contains?: Maybe<String>;
  zone_starts_with?: Maybe<String>;
  zone_not_starts_with?: Maybe<String>;
  zone_ends_with?: Maybe<String>;
  zone_not_ends_with?: Maybe<String>;
  price?: Maybe<String>;
  price_not?: Maybe<String>;
  price_in?: Maybe<String[] | String>;
  price_not_in?: Maybe<String[] | String>;
  price_lt?: Maybe<String>;
  price_lte?: Maybe<String>;
  price_gt?: Maybe<String>;
  price_gte?: Maybe<String>;
  price_contains?: Maybe<String>;
  price_not_contains?: Maybe<String>;
  price_starts_with?: Maybe<String>;
  price_not_starts_with?: Maybe<String>;
  price_ends_with?: Maybe<String>;
  price_not_ends_with?: Maybe<String>;
  deposit?: Maybe<String>;
  deposit_not?: Maybe<String>;
  deposit_in?: Maybe<String[] | String>;
  deposit_not_in?: Maybe<String[] | String>;
  deposit_lt?: Maybe<String>;
  deposit_lte?: Maybe<String>;
  deposit_gt?: Maybe<String>;
  deposit_gte?: Maybe<String>;
  deposit_contains?: Maybe<String>;
  deposit_not_contains?: Maybe<String>;
  deposit_starts_with?: Maybe<String>;
  deposit_not_starts_with?: Maybe<String>;
  deposit_ends_with?: Maybe<String>;
  deposit_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  condition?: Maybe<String>;
  condition_not?: Maybe<String>;
  condition_in?: Maybe<String[] | String>;
  condition_not_in?: Maybe<String[] | String>;
  condition_lt?: Maybe<String>;
  condition_lte?: Maybe<String>;
  condition_gt?: Maybe<String>;
  condition_gte?: Maybe<String>;
  condition_contains?: Maybe<String>;
  condition_not_contains?: Maybe<String>;
  condition_starts_with?: Maybe<String>;
  condition_not_starts_with?: Maybe<String>;
  condition_ends_with?: Maybe<String>;
  condition_not_ends_with?: Maybe<String>;
  thumbnail?: Maybe<String>;
  thumbnail_not?: Maybe<String>;
  thumbnail_in?: Maybe<String[] | String>;
  thumbnail_not_in?: Maybe<String[] | String>;
  thumbnail_lt?: Maybe<String>;
  thumbnail_lte?: Maybe<String>;
  thumbnail_gt?: Maybe<String>;
  thumbnail_gte?: Maybe<String>;
  thumbnail_contains?: Maybe<String>;
  thumbnail_not_contains?: Maybe<String>;
  thumbnail_starts_with?: Maybe<String>;
  thumbnail_not_starts_with?: Maybe<String>;
  thumbnail_ends_with?: Maybe<String>;
  thumbnail_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<RentScalarWhereInput[] | RentScalarWhereInput>;
  OR?: Maybe<RentScalarWhereInput[] | RentScalarWhereInput>;
  NOT?: Maybe<RentScalarWhereInput[] | RentScalarWhereInput>;
}

export interface RentUpdateManyWithWhereNestedInput {
  where: RentScalarWhereInput;
  data: RentUpdateManyDataInput;
}

export interface RentUpdateManyDataInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
  status?: Maybe<String>;
  size?: Maybe<String>;
  zone?: Maybe<String>;
  price?: Maybe<String>;
  deposit?: Maybe<String>;
  type?: Maybe<String>;
  address?: Maybe<String>;
  condition?: Maybe<String>;
  thumbnail?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueWithoutMeetsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutMeetsDataInput;
  create: UserCreateWithoutMeetsInput;
}

export interface MeetUpsertWithoutImagesInput {
  update: MeetUpdateWithoutImagesDataInput;
  create: MeetCreateWithoutImagesInput;
}

export interface ImageUpsertWithWhereUniqueWithoutMarketInput {
  where: ImageWhereUniqueInput;
  update: ImageUpdateWithoutMarketDataInput;
  create: ImageCreateWithoutMarketInput;
}

export interface MarketUpsertWithWhereUniqueWithoutUserInput {
  where: MarketWhereUniqueInput;
  update: MarketUpdateWithoutUserDataInput;
  create: MarketCreateWithoutUserInput;
}

export interface MarketScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  price?: Maybe<String>;
  price_not?: Maybe<String>;
  price_in?: Maybe<String[] | String>;
  price_not_in?: Maybe<String[] | String>;
  price_lt?: Maybe<String>;
  price_lte?: Maybe<String>;
  price_gt?: Maybe<String>;
  price_gte?: Maybe<String>;
  price_contains?: Maybe<String>;
  price_not_contains?: Maybe<String>;
  price_starts_with?: Maybe<String>;
  price_not_starts_with?: Maybe<String>;
  price_ends_with?: Maybe<String>;
  price_not_ends_with?: Maybe<String>;
  thumbnail?: Maybe<String>;
  thumbnail_not?: Maybe<String>;
  thumbnail_in?: Maybe<String[] | String>;
  thumbnail_not_in?: Maybe<String[] | String>;
  thumbnail_lt?: Maybe<String>;
  thumbnail_lte?: Maybe<String>;
  thumbnail_gt?: Maybe<String>;
  thumbnail_gte?: Maybe<String>;
  thumbnail_contains?: Maybe<String>;
  thumbnail_not_contains?: Maybe<String>;
  thumbnail_starts_with?: Maybe<String>;
  thumbnail_not_starts_with?: Maybe<String>;
  thumbnail_ends_with?: Maybe<String>;
  thumbnail_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MarketScalarWhereInput[] | MarketScalarWhereInput>;
  OR?: Maybe<MarketScalarWhereInput[] | MarketScalarWhereInput>;
  NOT?: Maybe<MarketScalarWhereInput[] | MarketScalarWhereInput>;
}

export interface MarketUpdateManyWithWhereNestedInput {
  where: MarketScalarWhereInput;
  data: MarketUpdateManyDataInput;
}

export interface MarketUpdateManyDataInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
  status?: Maybe<String>;
  price?: Maybe<String>;
  thumbnail?: Maybe<String>;
}

export interface UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput;
  create: UserCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutBoardInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutBoardDataInput;
  create: CommentCreateWithoutBoardInput;
}

export interface BoardUpsertWithWhereUniqueWithoutUserInput {
  where: BoardWhereUniqueInput;
  update: BoardUpdateWithoutUserDataInput;
  create: BoardCreateWithoutUserInput;
}

export interface BoardScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BoardScalarWhereInput[] | BoardScalarWhereInput>;
  OR?: Maybe<BoardScalarWhereInput[] | BoardScalarWhereInput>;
  NOT?: Maybe<BoardScalarWhereInput[] | BoardScalarWhereInput>;
}

export interface BoardUpdateManyWithWhereNestedInput {
  where: BoardScalarWhereInput;
  data: BoardUpdateManyDataInput;
}

export interface BoardUpdateManyDataInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
  category?: Maybe<String>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface CommentUpdateManyInput {
  create?: Maybe<CommentCreateInput[] | CommentCreateInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueNestedInput[]
    | CommentUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueNestedInput[]
    | CommentUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateDataInput;
}

export interface CommentUpdateDataInput {
  text?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutCommentsInput>;
  board?: Maybe<BoardUpdateOneWithoutCommentsInput>;
}

export interface CommentUpsertWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateDataInput;
  create: CommentCreateInput;
}

export interface NoticeUpsertWithWhereUniqueNestedInput {
  where: NoticeWhereUniqueInput;
  update: NoticeUpdateDataInput;
  create: NoticeCreateInput;
}

export interface NoticeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  caption?: Maybe<String>;
  caption_not?: Maybe<String>;
  caption_in?: Maybe<String[] | String>;
  caption_not_in?: Maybe<String[] | String>;
  caption_lt?: Maybe<String>;
  caption_lte?: Maybe<String>;
  caption_gt?: Maybe<String>;
  caption_gte?: Maybe<String>;
  caption_contains?: Maybe<String>;
  caption_not_contains?: Maybe<String>;
  caption_starts_with?: Maybe<String>;
  caption_not_starts_with?: Maybe<String>;
  caption_ends_with?: Maybe<String>;
  caption_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<NoticeScalarWhereInput[] | NoticeScalarWhereInput>;
  OR?: Maybe<NoticeScalarWhereInput[] | NoticeScalarWhereInput>;
  NOT?: Maybe<NoticeScalarWhereInput[] | NoticeScalarWhereInput>;
}

export interface NoticeUpdateManyWithWhereNestedInput {
  where: NoticeScalarWhereInput;
  data: NoticeUpdateManyDataInput;
}

export interface NoticeUpdateManyDataInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
}

export interface MarketUpdateManyInput {
  create?: Maybe<MarketCreateInput[] | MarketCreateInput>;
  update?: Maybe<
    | MarketUpdateWithWhereUniqueNestedInput[]
    | MarketUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | MarketUpsertWithWhereUniqueNestedInput[]
    | MarketUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<MarketWhereUniqueInput[] | MarketWhereUniqueInput>;
  connect?: Maybe<MarketWhereUniqueInput[] | MarketWhereUniqueInput>;
  set?: Maybe<MarketWhereUniqueInput[] | MarketWhereUniqueInput>;
  disconnect?: Maybe<MarketWhereUniqueInput[] | MarketWhereUniqueInput>;
  deleteMany?: Maybe<MarketScalarWhereInput[] | MarketScalarWhereInput>;
  updateMany?: Maybe<
    | MarketUpdateManyWithWhereNestedInput[]
    | MarketUpdateManyWithWhereNestedInput
  >;
}

export interface MarketUpdateWithWhereUniqueNestedInput {
  where: MarketWhereUniqueInput;
  data: MarketUpdateDataInput;
}

export interface MarketUpdateDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutMarketsInput>;
  title?: Maybe<String>;
  caption?: Maybe<String>;
  status?: Maybe<String>;
  price?: Maybe<String>;
  thumbnail?: Maybe<String>;
  images?: Maybe<ImageUpdateManyWithoutMarketInput>;
}

export interface MarketUpsertWithWhereUniqueNestedInput {
  where: MarketWhereUniqueInput;
  update: MarketUpdateDataInput;
  create: MarketCreateInput;
}

export interface BoardUpdateManyInput {
  create?: Maybe<BoardCreateInput[] | BoardCreateInput>;
  update?: Maybe<
    | BoardUpdateWithWhereUniqueNestedInput[]
    | BoardUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | BoardUpsertWithWhereUniqueNestedInput[]
    | BoardUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  connect?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  set?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  disconnect?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  deleteMany?: Maybe<BoardScalarWhereInput[] | BoardScalarWhereInput>;
  updateMany?: Maybe<
    BoardUpdateManyWithWhereNestedInput[] | BoardUpdateManyWithWhereNestedInput
  >;
}

export interface BoardUpdateWithWhereUniqueNestedInput {
  where: BoardWhereUniqueInput;
  data: BoardUpdateDataInput;
}

export interface BoardUpdateDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutBoardsInput>;
  title?: Maybe<String>;
  caption?: Maybe<String>;
  category?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutBoardInput>;
}

export interface BoardUpsertWithWhereUniqueNestedInput {
  where: BoardWhereUniqueInput;
  update: BoardUpdateDataInput;
  create: BoardCreateInput;
}

export interface RentUpdateManyInput {
  create?: Maybe<RentCreateInput[] | RentCreateInput>;
  update?: Maybe<
    | RentUpdateWithWhereUniqueNestedInput[]
    | RentUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | RentUpsertWithWhereUniqueNestedInput[]
    | RentUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
  connect?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
  set?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
  disconnect?: Maybe<RentWhereUniqueInput[] | RentWhereUniqueInput>;
  deleteMany?: Maybe<RentScalarWhereInput[] | RentScalarWhereInput>;
  updateMany?: Maybe<
    RentUpdateManyWithWhereNestedInput[] | RentUpdateManyWithWhereNestedInput
  >;
}

export interface RentUpdateWithWhereUniqueNestedInput {
  where: RentWhereUniqueInput;
  data: RentUpdateDataInput;
}

export interface RentUpdateDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutRentsInput>;
  title?: Maybe<String>;
  caption?: Maybe<String>;
  images?: Maybe<ImageUpdateManyWithoutRentInput>;
  status?: Maybe<String>;
  size?: Maybe<String>;
  zone?: Maybe<String>;
  price?: Maybe<String>;
  deposit?: Maybe<String>;
  type?: Maybe<String>;
  address?: Maybe<String>;
  condition?: Maybe<String>;
  thumbnail?: Maybe<String>;
}

export interface RentUpsertWithWhereUniqueNestedInput {
  where: RentWhereUniqueInput;
  update: RentUpdateDataInput;
  create: RentCreateInput;
}

export interface PostUpsertWithWhereUniqueWithoutUserInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutUserDataInput;
  create: PostCreateWithoutUserInput;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface UserUpsertWithoutBoardsInput {
  update: UserUpdateWithoutBoardsDataInput;
  create: UserCreateWithoutBoardsInput;
}

export interface BoardUpdateManyMutationInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
  category?: Maybe<String>;
}

export interface CommentUpdateInput {
  text?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutCommentsInput>;
  board?: Maybe<BoardUpdateOneWithoutCommentsInput>;
}

export interface CommentUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface ImageCreateInput {
  id?: Maybe<ID_Input>;
  url: String;
  meet?: Maybe<MeetCreateOneWithoutImagesInput>;
  market?: Maybe<MarketCreateOneWithoutImagesInput>;
  rent?: Maybe<RentCreateOneWithoutImagesInput>;
  info?: Maybe<InfoCreateOneWithoutImagesInput>;
}

export interface ImageUpdateInput {
  url?: Maybe<String>;
  meet?: Maybe<MeetUpdateOneWithoutImagesInput>;
  market?: Maybe<MarketUpdateOneWithoutImagesInput>;
  rent?: Maybe<RentUpdateOneWithoutImagesInput>;
  info?: Maybe<InfoUpdateOneWithoutImagesInput>;
}

export interface ImageUpdateManyMutationInput {
  url?: Maybe<String>;
}

export interface InfoCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  text: String;
  images?: Maybe<ImageCreateManyWithoutInfoInput>;
}

export interface ImageCreateManyWithoutInfoInput {
  create?: Maybe<ImageCreateWithoutInfoInput[] | ImageCreateWithoutInfoInput>;
  connect?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
}

export interface ImageCreateWithoutInfoInput {
  id?: Maybe<ID_Input>;
  url: String;
  meet?: Maybe<MeetCreateOneWithoutImagesInput>;
  market?: Maybe<MarketCreateOneWithoutImagesInput>;
  rent?: Maybe<RentCreateOneWithoutImagesInput>;
}

export interface InfoUpdateInput {
  title?: Maybe<String>;
  text?: Maybe<String>;
  images?: Maybe<ImageUpdateManyWithoutInfoInput>;
}

export interface ImageUpdateManyWithoutInfoInput {
  create?: Maybe<ImageCreateWithoutInfoInput[] | ImageCreateWithoutInfoInput>;
  delete?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  connect?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  set?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  disconnect?: Maybe<ImageWhereUniqueInput[] | ImageWhereUniqueInput>;
  update?: Maybe<
    | ImageUpdateWithWhereUniqueWithoutInfoInput[]
    | ImageUpdateWithWhereUniqueWithoutInfoInput
  >;
  upsert?: Maybe<
    | ImageUpsertWithWhereUniqueWithoutInfoInput[]
    | ImageUpsertWithWhereUniqueWithoutInfoInput
  >;
  deleteMany?: Maybe<ImageScalarWhereInput[] | ImageScalarWhereInput>;
  updateMany?: Maybe<
    ImageUpdateManyWithWhereNestedInput[] | ImageUpdateManyWithWhereNestedInput
  >;
}

export interface ImageUpdateWithWhereUniqueWithoutInfoInput {
  where: ImageWhereUniqueInput;
  data: ImageUpdateWithoutInfoDataInput;
}

export interface ImageUpdateWithoutInfoDataInput {
  url?: Maybe<String>;
  meet?: Maybe<MeetUpdateOneWithoutImagesInput>;
  market?: Maybe<MarketUpdateOneWithoutImagesInput>;
  rent?: Maybe<RentUpdateOneWithoutImagesInput>;
}

export interface ImageUpsertWithWhereUniqueWithoutInfoInput {
  where: ImageWhereUniqueInput;
  update: ImageUpdateWithoutInfoDataInput;
  create: ImageCreateWithoutInfoInput;
}

export interface InfoUpdateManyMutationInput {
  title?: Maybe<String>;
  text?: Maybe<String>;
}

export interface MarketUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutMarketsInput>;
  title?: Maybe<String>;
  caption?: Maybe<String>;
  status?: Maybe<String>;
  price?: Maybe<String>;
  thumbnail?: Maybe<String>;
  images?: Maybe<ImageUpdateManyWithoutMarketInput>;
}

export interface MarketUpdateManyMutationInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
  status?: Maybe<String>;
  price?: Maybe<String>;
  thumbnail?: Maybe<String>;
}

export interface MeetCreateInput {
  id?: Maybe<ID_Input>;
  intro: String;
  title: String;
  creator?: Maybe<String>;
  location?: Maybe<String>;
  date: String;
  time: String;
  isPublic: Boolean;
  member?: Maybe<Int>;
  thumbnail?: Maybe<String>;
  theme: String;
  participants?: Maybe<UserCreateManyWithoutMeetsInput>;
  images?: Maybe<ImageCreateManyWithoutMeetInput>;
  tags?: Maybe<TagCreateManyWithoutMeetsInput>;
}

export interface MeetUpdateInput {
  intro?: Maybe<String>;
  title?: Maybe<String>;
  creator?: Maybe<String>;
  location?: Maybe<String>;
  date?: Maybe<String>;
  time?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  member?: Maybe<Int>;
  thumbnail?: Maybe<String>;
  theme?: Maybe<String>;
  participants?: Maybe<UserUpdateManyWithoutMeetsInput>;
  images?: Maybe<ImageUpdateManyWithoutMeetInput>;
  tags?: Maybe<TagUpdateManyWithoutMeetsInput>;
}

export interface MeetUpdateManyMutationInput {
  intro?: Maybe<String>;
  title?: Maybe<String>;
  creator?: Maybe<String>;
  location?: Maybe<String>;
  date?: Maybe<String>;
  time?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  member?: Maybe<Int>;
  thumbnail?: Maybe<String>;
  theme?: Maybe<String>;
}

export interface MessageCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  from: UserCreateOneInput;
  to: UserCreateOneInput;
  room: RoomCreateOneWithoutMessagesInput;
}

export interface RoomCreateOneWithoutMessagesInput {
  create?: Maybe<RoomCreateWithoutMessagesInput>;
  connect?: Maybe<RoomWhereUniqueInput>;
}

export interface RoomCreateWithoutMessagesInput {
  id?: Maybe<ID_Input>;
  participants?: Maybe<UserCreateManyWithoutRoomsInput>;
}

export interface UserCreateManyWithoutRoomsInput {
  create?: Maybe<UserCreateWithoutRoomsInput[] | UserCreateWithoutRoomsInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutRoomsInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  email: String;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username: String;
  intro?: Maybe<String>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  boards?: Maybe<BoardCreateManyWithoutUserInput>;
  markets?: Maybe<MarketCreateManyWithoutUserInput>;
  rents?: Maybe<RentCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  meets?: Maybe<MeetCreateManyWithoutParticipantsInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  schedules?: Maybe<ScheduleCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface MessageUpdateInput {
  text?: Maybe<String>;
  from?: Maybe<UserUpdateOneRequiredInput>;
  to?: Maybe<UserUpdateOneRequiredInput>;
  room?: Maybe<RoomUpdateOneRequiredWithoutMessagesInput>;
}

export interface RoomUpdateOneRequiredWithoutMessagesInput {
  create?: Maybe<RoomCreateWithoutMessagesInput>;
  update?: Maybe<RoomUpdateWithoutMessagesDataInput>;
  upsert?: Maybe<RoomUpsertWithoutMessagesInput>;
  connect?: Maybe<RoomWhereUniqueInput>;
}

export interface RoomUpdateWithoutMessagesDataInput {
  participants?: Maybe<UserUpdateManyWithoutRoomsInput>;
}

export interface UserUpdateManyWithoutRoomsInput {
  create?: Maybe<UserCreateWithoutRoomsInput[] | UserCreateWithoutRoomsInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutRoomsInput[]
    | UserUpdateWithWhereUniqueWithoutRoomsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutRoomsInput[]
    | UserUpsertWithWhereUniqueWithoutRoomsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutRoomsDataInput;
}

export interface UserUpdateWithoutRoomsDataInput {
  avatar?: Maybe<String>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username?: Maybe<String>;
  intro?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  boards?: Maybe<BoardUpdateManyWithoutUserInput>;
  markets?: Maybe<MarketUpdateManyWithoutUserInput>;
  rents?: Maybe<RentUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  meets?: Maybe<MeetUpdateManyWithoutParticipantsInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  schedules?: Maybe<ScheduleUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutRoomsDataInput;
  create: UserCreateWithoutRoomsInput;
}

export interface RoomUpsertWithoutMessagesInput {
  update: RoomUpdateWithoutMessagesDataInput;
  create: RoomCreateWithoutMessagesInput;
}

export interface MessageUpdateManyMutationInput {
  text?: Maybe<String>;
}

export interface NoticeUpdateInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  title?: Maybe<String>;
  caption?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyInput>;
}

export interface NoticeUpdateManyMutationInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutPostsInput;
  notices?: Maybe<NoticeCreateManyInput>;
  markgets?: Maybe<MarketCreateManyInput>;
  boards?: Maybe<BoardCreateManyInput>;
  rents?: Maybe<RentCreateManyInput>;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  email: String;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username: String;
  intro?: Maybe<String>;
  boards?: Maybe<BoardCreateManyWithoutUserInput>;
  markets?: Maybe<MarketCreateManyWithoutUserInput>;
  rents?: Maybe<RentCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  meets?: Maybe<MeetCreateManyWithoutParticipantsInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  schedules?: Maybe<ScheduleCreateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface PostUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  notices?: Maybe<NoticeUpdateManyInput>;
  markgets?: Maybe<MarketUpdateManyInput>;
  boards?: Maybe<BoardUpdateManyInput>;
  rents?: Maybe<RentUpdateManyInput>;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPostsDataInput {
  avatar?: Maybe<String>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username?: Maybe<String>;
  intro?: Maybe<String>;
  boards?: Maybe<BoardUpdateManyWithoutUserInput>;
  markets?: Maybe<MarketUpdateManyWithoutUserInput>;
  rents?: Maybe<RentUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  meets?: Maybe<MeetUpdateManyWithoutParticipantsInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  schedules?: Maybe<ScheduleUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface RentUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutRentsInput>;
  title?: Maybe<String>;
  caption?: Maybe<String>;
  images?: Maybe<ImageUpdateManyWithoutRentInput>;
  status?: Maybe<String>;
  size?: Maybe<String>;
  zone?: Maybe<String>;
  price?: Maybe<String>;
  deposit?: Maybe<String>;
  type?: Maybe<String>;
  address?: Maybe<String>;
  condition?: Maybe<String>;
  thumbnail?: Maybe<String>;
}

export interface RentUpdateManyMutationInput {
  title?: Maybe<String>;
  caption?: Maybe<String>;
  status?: Maybe<String>;
  size?: Maybe<String>;
  zone?: Maybe<String>;
  price?: Maybe<String>;
  deposit?: Maybe<String>;
  type?: Maybe<String>;
  address?: Maybe<String>;
  condition?: Maybe<String>;
  thumbnail?: Maybe<String>;
}

export interface RoomCreateInput {
  id?: Maybe<ID_Input>;
  participants?: Maybe<UserCreateManyWithoutRoomsInput>;
  messages?: Maybe<MessageCreateManyWithoutRoomInput>;
}

export interface RoomUpdateInput {
  participants?: Maybe<UserUpdateManyWithoutRoomsInput>;
  messages?: Maybe<MessageUpdateManyWithoutRoomInput>;
}

export interface ScheduleCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutSchedulesInput;
  date: String;
  todo: String;
  tag?: Maybe<String>;
  isOn: Boolean;
}

export interface UserCreateOneWithoutSchedulesInput {
  create?: Maybe<UserCreateWithoutSchedulesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutSchedulesInput {
  id?: Maybe<ID_Input>;
  avatar?: Maybe<String>;
  email: String;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username: String;
  intro?: Maybe<String>;
  posts?: Maybe<PostCreateManyWithoutUserInput>;
  boards?: Maybe<BoardCreateManyWithoutUserInput>;
  markets?: Maybe<MarketCreateManyWithoutUserInput>;
  rents?: Maybe<RentCreateManyWithoutUserInput>;
  comments?: Maybe<CommentCreateManyWithoutUserInput>;
  meets?: Maybe<MeetCreateManyWithoutParticipantsInput>;
  following?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowingInput>;
  rooms?: Maybe<RoomCreateManyWithoutParticipantsInput>;
  loginSecret?: Maybe<String>;
}

export interface ScheduleUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutSchedulesInput>;
  date?: Maybe<String>;
  todo?: Maybe<String>;
  tag?: Maybe<String>;
  isOn?: Maybe<Boolean>;
}

export interface UserUpdateOneRequiredWithoutSchedulesInput {
  create?: Maybe<UserCreateWithoutSchedulesInput>;
  update?: Maybe<UserUpdateWithoutSchedulesDataInput>;
  upsert?: Maybe<UserUpsertWithoutSchedulesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutSchedulesDataInput {
  avatar?: Maybe<String>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username?: Maybe<String>;
  intro?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  boards?: Maybe<BoardUpdateManyWithoutUserInput>;
  markets?: Maybe<MarketUpdateManyWithoutUserInput>;
  rents?: Maybe<RentUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  meets?: Maybe<MeetUpdateManyWithoutParticipantsInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  loginSecret?: Maybe<String>;
}

export interface UserUpsertWithoutSchedulesInput {
  update: UserUpdateWithoutSchedulesDataInput;
  create: UserCreateWithoutSchedulesInput;
}

export interface ScheduleUpdateManyMutationInput {
  date?: Maybe<String>;
  todo?: Maybe<String>;
  tag?: Maybe<String>;
  isOn?: Maybe<Boolean>;
}

export interface TagCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  meets?: Maybe<MeetCreateManyWithoutTagsInput>;
}

export interface MeetCreateManyWithoutTagsInput {
  create?: Maybe<MeetCreateWithoutTagsInput[] | MeetCreateWithoutTagsInput>;
  connect?: Maybe<MeetWhereUniqueInput[] | MeetWhereUniqueInput>;
}

export interface MeetCreateWithoutTagsInput {
  id?: Maybe<ID_Input>;
  intro: String;
  title: String;
  creator?: Maybe<String>;
  location?: Maybe<String>;
  date: String;
  time: String;
  isPublic: Boolean;
  member?: Maybe<Int>;
  thumbnail?: Maybe<String>;
  theme: String;
  participants?: Maybe<UserCreateManyWithoutMeetsInput>;
  images?: Maybe<ImageCreateManyWithoutMeetInput>;
}

export interface TagUpdateInput {
  title?: Maybe<String>;
  meets?: Maybe<MeetUpdateManyWithoutTagsInput>;
}

export interface MeetUpdateManyWithoutTagsInput {
  create?: Maybe<MeetCreateWithoutTagsInput[] | MeetCreateWithoutTagsInput>;
  delete?: Maybe<MeetWhereUniqueInput[] | MeetWhereUniqueInput>;
  connect?: Maybe<MeetWhereUniqueInput[] | MeetWhereUniqueInput>;
  set?: Maybe<MeetWhereUniqueInput[] | MeetWhereUniqueInput>;
  disconnect?: Maybe<MeetWhereUniqueInput[] | MeetWhereUniqueInput>;
  update?: Maybe<
    | MeetUpdateWithWhereUniqueWithoutTagsInput[]
    | MeetUpdateWithWhereUniqueWithoutTagsInput
  >;
  upsert?: Maybe<
    | MeetUpsertWithWhereUniqueWithoutTagsInput[]
    | MeetUpsertWithWhereUniqueWithoutTagsInput
  >;
  deleteMany?: Maybe<MeetScalarWhereInput[] | MeetScalarWhereInput>;
  updateMany?: Maybe<
    MeetUpdateManyWithWhereNestedInput[] | MeetUpdateManyWithWhereNestedInput
  >;
}

export interface MeetUpdateWithWhereUniqueWithoutTagsInput {
  where: MeetWhereUniqueInput;
  data: MeetUpdateWithoutTagsDataInput;
}

export interface MeetUpdateWithoutTagsDataInput {
  intro?: Maybe<String>;
  title?: Maybe<String>;
  creator?: Maybe<String>;
  location?: Maybe<String>;
  date?: Maybe<String>;
  time?: Maybe<String>;
  isPublic?: Maybe<Boolean>;
  member?: Maybe<Int>;
  thumbnail?: Maybe<String>;
  theme?: Maybe<String>;
  participants?: Maybe<UserUpdateManyWithoutMeetsInput>;
  images?: Maybe<ImageUpdateManyWithoutMeetInput>;
}

export interface MeetUpsertWithWhereUniqueWithoutTagsInput {
  where: MeetWhereUniqueInput;
  update: MeetUpdateWithoutTagsDataInput;
  create: MeetCreateWithoutTagsInput;
}

export interface TagUpdateManyMutationInput {
  title?: Maybe<String>;
}

export interface UserUpdateInput {
  avatar?: Maybe<String>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username?: Maybe<String>;
  intro?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutUserInput>;
  boards?: Maybe<BoardUpdateManyWithoutUserInput>;
  markets?: Maybe<MarketUpdateManyWithoutUserInput>;
  rents?: Maybe<RentUpdateManyWithoutUserInput>;
  comments?: Maybe<CommentUpdateManyWithoutUserInput>;
  meets?: Maybe<MeetUpdateManyWithoutParticipantsInput>;
  following?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowingInput>;
  rooms?: Maybe<RoomUpdateManyWithoutParticipantsInput>;
  schedules?: Maybe<ScheduleUpdateManyWithoutUserInput>;
  loginSecret?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  avatar?: Maybe<String>;
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  username?: Maybe<String>;
  intro?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface BoardSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BoardWhereInput>;
  AND?: Maybe<BoardSubscriptionWhereInput[] | BoardSubscriptionWhereInput>;
  OR?: Maybe<BoardSubscriptionWhereInput[] | BoardSubscriptionWhereInput>;
  NOT?: Maybe<BoardSubscriptionWhereInput[] | BoardSubscriptionWhereInput>;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface ImageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ImageWhereInput>;
  AND?: Maybe<ImageSubscriptionWhereInput[] | ImageSubscriptionWhereInput>;
  OR?: Maybe<ImageSubscriptionWhereInput[] | ImageSubscriptionWhereInput>;
  NOT?: Maybe<ImageSubscriptionWhereInput[] | ImageSubscriptionWhereInput>;
}

export interface InfoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<InfoWhereInput>;
  AND?: Maybe<InfoSubscriptionWhereInput[] | InfoSubscriptionWhereInput>;
  OR?: Maybe<InfoSubscriptionWhereInput[] | InfoSubscriptionWhereInput>;
  NOT?: Maybe<InfoSubscriptionWhereInput[] | InfoSubscriptionWhereInput>;
}

export interface MarketSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MarketWhereInput>;
  AND?: Maybe<MarketSubscriptionWhereInput[] | MarketSubscriptionWhereInput>;
  OR?: Maybe<MarketSubscriptionWhereInput[] | MarketSubscriptionWhereInput>;
  NOT?: Maybe<MarketSubscriptionWhereInput[] | MarketSubscriptionWhereInput>;
}

export interface MeetSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MeetWhereInput>;
  AND?: Maybe<MeetSubscriptionWhereInput[] | MeetSubscriptionWhereInput>;
  OR?: Maybe<MeetSubscriptionWhereInput[] | MeetSubscriptionWhereInput>;
  NOT?: Maybe<MeetSubscriptionWhereInput[] | MeetSubscriptionWhereInput>;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MessageWhereInput>;
  AND?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  OR?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  NOT?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
}

export interface NoticeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NoticeWhereInput>;
  AND?: Maybe<NoticeSubscriptionWhereInput[] | NoticeSubscriptionWhereInput>;
  OR?: Maybe<NoticeSubscriptionWhereInput[] | NoticeSubscriptionWhereInput>;
  NOT?: Maybe<NoticeSubscriptionWhereInput[] | NoticeSubscriptionWhereInput>;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface RentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RentWhereInput>;
  AND?: Maybe<RentSubscriptionWhereInput[] | RentSubscriptionWhereInput>;
  OR?: Maybe<RentSubscriptionWhereInput[] | RentSubscriptionWhereInput>;
  NOT?: Maybe<RentSubscriptionWhereInput[] | RentSubscriptionWhereInput>;
}

export interface RoomSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RoomWhereInput>;
  AND?: Maybe<RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput>;
  OR?: Maybe<RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput>;
  NOT?: Maybe<RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput>;
}

export interface ScheduleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ScheduleWhereInput>;
  AND?: Maybe<
    ScheduleSubscriptionWhereInput[] | ScheduleSubscriptionWhereInput
  >;
  OR?: Maybe<ScheduleSubscriptionWhereInput[] | ScheduleSubscriptionWhereInput>;
  NOT?: Maybe<
    ScheduleSubscriptionWhereInput[] | ScheduleSubscriptionWhereInput
  >;
}

export interface TagSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TagWhereInput>;
  AND?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
  OR?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
  NOT?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Board {
  id: ID_Output;
  title: String;
  caption: String;
  category: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface BoardPromise extends Promise<Board>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  category: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BoardSubscription
  extends Promise<AsyncIterator<Board>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BoardNullablePromise
  extends Promise<Board | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  category: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  avatar?: String;
  email: String;
  firstName?: String;
  lastName?: String;
  username: String;
  intro?: String;
  loginSecret?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  avatar: () => Promise<String>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  username: () => Promise<String>;
  intro: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  boards: <T = FragmentableArray<Board>>(args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  markets: <T = FragmentableArray<Market>>(args?: {
    where?: MarketWhereInput;
    orderBy?: MarketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rents: <T = FragmentableArray<Rent>>(args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  meets: <T = FragmentableArray<Meet>>(args?: {
    where?: MeetWhereInput;
    orderBy?: MeetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rooms: <T = FragmentableArray<Room>>(args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  schedules: <T = FragmentableArray<Schedule>>(args?: {
    where?: ScheduleWhereInput;
    orderBy?: ScheduleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  loginSecret: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  avatar: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  intro: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  boards: <T = Promise<AsyncIterator<BoardSubscription>>>(args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  markets: <T = Promise<AsyncIterator<MarketSubscription>>>(args?: {
    where?: MarketWhereInput;
    orderBy?: MarketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rents: <T = Promise<AsyncIterator<RentSubscription>>>(args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  meets: <T = Promise<AsyncIterator<MeetSubscription>>>(args?: {
    where?: MeetWhereInput;
    orderBy?: MeetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rooms: <T = Promise<AsyncIterator<RoomSubscription>>>(args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  schedules: <T = Promise<AsyncIterator<ScheduleSubscription>>>(args?: {
    where?: ScheduleWhereInput;
    orderBy?: ScheduleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  loginSecret: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  avatar: () => Promise<String>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  username: () => Promise<String>;
  intro: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  boards: <T = FragmentableArray<Board>>(args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  markets: <T = FragmentableArray<Market>>(args?: {
    where?: MarketWhereInput;
    orderBy?: MarketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rents: <T = FragmentableArray<Rent>>(args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  meets: <T = FragmentableArray<Meet>>(args?: {
    where?: MeetWhereInput;
    orderBy?: MeetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  following: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rooms: <T = FragmentableArray<Room>>(args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  schedules: <T = FragmentableArray<Schedule>>(args?: {
    where?: ScheduleWhereInput;
    orderBy?: ScheduleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  loginSecret: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Post {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  notices: <T = FragmentableArray<Notice>>(args?: {
    where?: NoticeWhereInput;
    orderBy?: NoticeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  markgets: <T = FragmentableArray<Market>>(args?: {
    where?: MarketWhereInput;
    orderBy?: MarketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  boards: <T = FragmentableArray<Board>>(args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rents: <T = FragmentableArray<Rent>>(args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  notices: <T = Promise<AsyncIterator<NoticeSubscription>>>(args?: {
    where?: NoticeWhereInput;
    orderBy?: NoticeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  markgets: <T = Promise<AsyncIterator<MarketSubscription>>>(args?: {
    where?: MarketWhereInput;
    orderBy?: MarketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  boards: <T = Promise<AsyncIterator<BoardSubscription>>>(args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rents: <T = Promise<AsyncIterator<RentSubscription>>>(args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  notices: <T = FragmentableArray<Notice>>(args?: {
    where?: NoticeWhereInput;
    orderBy?: NoticeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  markgets: <T = FragmentableArray<Market>>(args?: {
    where?: MarketWhereInput;
    orderBy?: MarketOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  boards: <T = FragmentableArray<Board>>(args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  rents: <T = FragmentableArray<Rent>>(args?: {
    where?: RentWhereInput;
    orderBy?: RentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Notice {
  id: ID_Output;
  title: String;
  caption: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface NoticePromise extends Promise<Notice>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface NoticeSubscription
  extends Promise<AsyncIterator<Notice>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface NoticeNullablePromise
  extends Promise<Notice | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Comment {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  user: <T = UserPromise>() => T;
  board: <T = BoardPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  board: <T = BoardSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  user: <T = UserPromise>() => T;
  board: <T = BoardPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Market {
  id: ID_Output;
  title: String;
  caption: String;
  status: String;
  price: String;
  thumbnail?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MarketPromise extends Promise<Market>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  status: () => Promise<String>;
  price: () => Promise<String>;
  thumbnail: () => Promise<String>;
  images: <T = FragmentableArray<Image>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MarketSubscription
  extends Promise<AsyncIterator<Market>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<String>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
  images: <T = Promise<AsyncIterator<ImageSubscription>>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MarketNullablePromise
  extends Promise<Market | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  status: () => Promise<String>;
  price: () => Promise<String>;
  thumbnail: () => Promise<String>;
  images: <T = FragmentableArray<Image>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Image {
  id: ID_Output;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ImagePromise extends Promise<Image>, Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  meet: <T = MeetPromise>() => T;
  market: <T = MarketPromise>() => T;
  rent: <T = RentPromise>() => T;
  info: <T = InfoPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ImageSubscription
  extends Promise<AsyncIterator<Image>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  meet: <T = MeetSubscription>() => T;
  market: <T = MarketSubscription>() => T;
  rent: <T = RentSubscription>() => T;
  info: <T = InfoSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ImageNullablePromise
  extends Promise<Image | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  meet: <T = MeetPromise>() => T;
  market: <T = MarketPromise>() => T;
  rent: <T = RentPromise>() => T;
  info: <T = InfoPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Meet {
  id: ID_Output;
  intro: String;
  title: String;
  creator?: String;
  location?: String;
  date: String;
  time: String;
  isPublic: Boolean;
  member?: Int;
  thumbnail?: String;
  theme: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MeetPromise extends Promise<Meet>, Fragmentable {
  id: () => Promise<ID_Output>;
  intro: () => Promise<String>;
  title: () => Promise<String>;
  creator: () => Promise<String>;
  location: () => Promise<String>;
  date: () => Promise<String>;
  time: () => Promise<String>;
  isPublic: () => Promise<Boolean>;
  member: () => Promise<Int>;
  thumbnail: () => Promise<String>;
  theme: () => Promise<String>;
  participants: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  images: <T = FragmentableArray<Image>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MeetSubscription
  extends Promise<AsyncIterator<Meet>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  intro: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  creator: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<String>>;
  time: () => Promise<AsyncIterator<String>>;
  isPublic: () => Promise<AsyncIterator<Boolean>>;
  member: () => Promise<AsyncIterator<Int>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
  theme: () => Promise<AsyncIterator<String>>;
  participants: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  images: <T = Promise<AsyncIterator<ImageSubscription>>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MeetNullablePromise
  extends Promise<Meet | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  intro: () => Promise<String>;
  title: () => Promise<String>;
  creator: () => Promise<String>;
  location: () => Promise<String>;
  date: () => Promise<String>;
  time: () => Promise<String>;
  isPublic: () => Promise<Boolean>;
  member: () => Promise<Int>;
  thumbnail: () => Promise<String>;
  theme: () => Promise<String>;
  participants: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  images: <T = FragmentableArray<Image>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Tag {
  id: ID_Output;
  title: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TagPromise extends Promise<Tag>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  meets: <T = FragmentableArray<Meet>>(args?: {
    where?: MeetWhereInput;
    orderBy?: MeetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TagSubscription
  extends Promise<AsyncIterator<Tag>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  meets: <T = Promise<AsyncIterator<MeetSubscription>>>(args?: {
    where?: MeetWhereInput;
    orderBy?: MeetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TagNullablePromise extends Promise<Tag | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  meets: <T = FragmentableArray<Meet>>(args?: {
    where?: MeetWhereInput;
    orderBy?: MeetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Rent {
  id: ID_Output;
  title: String;
  caption: String;
  status: String;
  size: String;
  zone: String;
  price: String;
  deposit: String;
  type: String;
  address: String;
  condition: String;
  thumbnail?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RentPromise extends Promise<Rent>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  images: <T = FragmentableArray<Image>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  status: () => Promise<String>;
  size: () => Promise<String>;
  zone: () => Promise<String>;
  price: () => Promise<String>;
  deposit: () => Promise<String>;
  type: () => Promise<String>;
  address: () => Promise<String>;
  condition: () => Promise<String>;
  thumbnail: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RentSubscription
  extends Promise<AsyncIterator<Rent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  images: <T = Promise<AsyncIterator<ImageSubscription>>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  status: () => Promise<AsyncIterator<String>>;
  size: () => Promise<AsyncIterator<String>>;
  zone: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<String>>;
  deposit: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  condition: () => Promise<AsyncIterator<String>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RentNullablePromise
  extends Promise<Rent | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  images: <T = FragmentableArray<Image>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  status: () => Promise<String>;
  size: () => Promise<String>;
  zone: () => Promise<String>;
  price: () => Promise<String>;
  deposit: () => Promise<String>;
  type: () => Promise<String>;
  address: () => Promise<String>;
  condition: () => Promise<String>;
  thumbnail: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Info {
  id: ID_Output;
  title: String;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface InfoPromise extends Promise<Info>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  text: () => Promise<String>;
  images: <T = FragmentableArray<Image>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface InfoSubscription
  extends Promise<AsyncIterator<Info>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String>>;
  images: <T = Promise<AsyncIterator<ImageSubscription>>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface InfoNullablePromise
  extends Promise<Info | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  text: () => Promise<String>;
  images: <T = FragmentableArray<Image>>(args?: {
    where?: ImageWhereInput;
    orderBy?: ImageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Room {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RoomPromise extends Promise<Room>, Fragmentable {
  id: () => Promise<ID_Output>;
  participants: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RoomSubscription
  extends Promise<AsyncIterator<Room>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  participants: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RoomNullablePromise
  extends Promise<Room | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  participants: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Message {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  from: <T = UserPromise>() => T;
  to: <T = UserPromise>() => T;
  room: <T = RoomPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  from: <T = UserSubscription>() => T;
  to: <T = UserSubscription>() => T;
  room: <T = RoomSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MessageNullablePromise
  extends Promise<Message | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  from: <T = UserPromise>() => T;
  to: <T = UserPromise>() => T;
  room: <T = RoomPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Schedule {
  id: ID_Output;
  date: String;
  todo: String;
  tag?: String;
  isOn: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SchedulePromise extends Promise<Schedule>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  date: () => Promise<String>;
  todo: () => Promise<String>;
  tag: () => Promise<String>;
  isOn: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ScheduleSubscription
  extends Promise<AsyncIterator<Schedule>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  date: () => Promise<AsyncIterator<String>>;
  todo: () => Promise<AsyncIterator<String>>;
  tag: () => Promise<AsyncIterator<String>>;
  isOn: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ScheduleNullablePromise
  extends Promise<Schedule | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  date: () => Promise<String>;
  todo: () => Promise<String>;
  tag: () => Promise<String>;
  isOn: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BoardConnection {
  pageInfo: PageInfo;
  edges: BoardEdge[];
}

export interface BoardConnectionPromise
  extends Promise<BoardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BoardEdge>>() => T;
  aggregate: <T = AggregateBoardPromise>() => T;
}

export interface BoardConnectionSubscription
  extends Promise<AsyncIterator<BoardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BoardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBoardSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BoardEdge {
  node: Board;
  cursor: String;
}

export interface BoardEdgePromise extends Promise<BoardEdge>, Fragmentable {
  node: <T = BoardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BoardEdgeSubscription
  extends Promise<AsyncIterator<BoardEdge>>,
    Fragmentable {
  node: <T = BoardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBoard {
  count: Int;
}

export interface AggregateBoardPromise
  extends Promise<AggregateBoard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBoardSubscription
  extends Promise<AsyncIterator<AggregateBoard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ImageConnection {
  pageInfo: PageInfo;
  edges: ImageEdge[];
}

export interface ImageConnectionPromise
  extends Promise<ImageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ImageEdge>>() => T;
  aggregate: <T = AggregateImagePromise>() => T;
}

export interface ImageConnectionSubscription
  extends Promise<AsyncIterator<ImageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ImageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateImageSubscription>() => T;
}

export interface ImageEdge {
  node: Image;
  cursor: String;
}

export interface ImageEdgePromise extends Promise<ImageEdge>, Fragmentable {
  node: <T = ImagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ImageEdgeSubscription
  extends Promise<AsyncIterator<ImageEdge>>,
    Fragmentable {
  node: <T = ImageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateImage {
  count: Int;
}

export interface AggregateImagePromise
  extends Promise<AggregateImage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateImageSubscription
  extends Promise<AsyncIterator<AggregateImage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface InfoConnection {
  pageInfo: PageInfo;
  edges: InfoEdge[];
}

export interface InfoConnectionPromise
  extends Promise<InfoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InfoEdge>>() => T;
  aggregate: <T = AggregateInfoPromise>() => T;
}

export interface InfoConnectionSubscription
  extends Promise<AsyncIterator<InfoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InfoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInfoSubscription>() => T;
}

export interface InfoEdge {
  node: Info;
  cursor: String;
}

export interface InfoEdgePromise extends Promise<InfoEdge>, Fragmentable {
  node: <T = InfoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InfoEdgeSubscription
  extends Promise<AsyncIterator<InfoEdge>>,
    Fragmentable {
  node: <T = InfoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateInfo {
  count: Int;
}

export interface AggregateInfoPromise
  extends Promise<AggregateInfo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInfoSubscription
  extends Promise<AsyncIterator<AggregateInfo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MarketConnection {
  pageInfo: PageInfo;
  edges: MarketEdge[];
}

export interface MarketConnectionPromise
  extends Promise<MarketConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MarketEdge>>() => T;
  aggregate: <T = AggregateMarketPromise>() => T;
}

export interface MarketConnectionSubscription
  extends Promise<AsyncIterator<MarketConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MarketEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMarketSubscription>() => T;
}

export interface MarketEdge {
  node: Market;
  cursor: String;
}

export interface MarketEdgePromise extends Promise<MarketEdge>, Fragmentable {
  node: <T = MarketPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MarketEdgeSubscription
  extends Promise<AsyncIterator<MarketEdge>>,
    Fragmentable {
  node: <T = MarketSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMarket {
  count: Int;
}

export interface AggregateMarketPromise
  extends Promise<AggregateMarket>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMarketSubscription
  extends Promise<AsyncIterator<AggregateMarket>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MeetConnection {
  pageInfo: PageInfo;
  edges: MeetEdge[];
}

export interface MeetConnectionPromise
  extends Promise<MeetConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MeetEdge>>() => T;
  aggregate: <T = AggregateMeetPromise>() => T;
}

export interface MeetConnectionSubscription
  extends Promise<AsyncIterator<MeetConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MeetEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMeetSubscription>() => T;
}

export interface MeetEdge {
  node: Meet;
  cursor: String;
}

export interface MeetEdgePromise extends Promise<MeetEdge>, Fragmentable {
  node: <T = MeetPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MeetEdgeSubscription
  extends Promise<AsyncIterator<MeetEdge>>,
    Fragmentable {
  node: <T = MeetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMeet {
  count: Int;
}

export interface AggregateMeetPromise
  extends Promise<AggregateMeet>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMeetSubscription
  extends Promise<AsyncIterator<AggregateMeet>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface NoticeConnection {
  pageInfo: PageInfo;
  edges: NoticeEdge[];
}

export interface NoticeConnectionPromise
  extends Promise<NoticeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NoticeEdge>>() => T;
  aggregate: <T = AggregateNoticePromise>() => T;
}

export interface NoticeConnectionSubscription
  extends Promise<AsyncIterator<NoticeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NoticeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNoticeSubscription>() => T;
}

export interface NoticeEdge {
  node: Notice;
  cursor: String;
}

export interface NoticeEdgePromise extends Promise<NoticeEdge>, Fragmentable {
  node: <T = NoticePromise>() => T;
  cursor: () => Promise<String>;
}

export interface NoticeEdgeSubscription
  extends Promise<AsyncIterator<NoticeEdge>>,
    Fragmentable {
  node: <T = NoticeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNotice {
  count: Int;
}

export interface AggregateNoticePromise
  extends Promise<AggregateNotice>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNoticeSubscription
  extends Promise<AsyncIterator<AggregateNotice>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RentConnection {
  pageInfo: PageInfo;
  edges: RentEdge[];
}

export interface RentConnectionPromise
  extends Promise<RentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RentEdge>>() => T;
  aggregate: <T = AggregateRentPromise>() => T;
}

export interface RentConnectionSubscription
  extends Promise<AsyncIterator<RentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRentSubscription>() => T;
}

export interface RentEdge {
  node: Rent;
  cursor: String;
}

export interface RentEdgePromise extends Promise<RentEdge>, Fragmentable {
  node: <T = RentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RentEdgeSubscription
  extends Promise<AsyncIterator<RentEdge>>,
    Fragmentable {
  node: <T = RentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRent {
  count: Int;
}

export interface AggregateRentPromise
  extends Promise<AggregateRent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRentSubscription
  extends Promise<AsyncIterator<AggregateRent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoomConnection {
  pageInfo: PageInfo;
  edges: RoomEdge[];
}

export interface RoomConnectionPromise
  extends Promise<RoomConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoomEdge>>() => T;
  aggregate: <T = AggregateRoomPromise>() => T;
}

export interface RoomConnectionSubscription
  extends Promise<AsyncIterator<RoomConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoomEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoomSubscription>() => T;
}

export interface RoomEdge {
  node: Room;
  cursor: String;
}

export interface RoomEdgePromise extends Promise<RoomEdge>, Fragmentable {
  node: <T = RoomPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoomEdgeSubscription
  extends Promise<AsyncIterator<RoomEdge>>,
    Fragmentable {
  node: <T = RoomSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRoom {
  count: Int;
}

export interface AggregateRoomPromise
  extends Promise<AggregateRoom>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoomSubscription
  extends Promise<AsyncIterator<AggregateRoom>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ScheduleConnection {
  pageInfo: PageInfo;
  edges: ScheduleEdge[];
}

export interface ScheduleConnectionPromise
  extends Promise<ScheduleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ScheduleEdge>>() => T;
  aggregate: <T = AggregateSchedulePromise>() => T;
}

export interface ScheduleConnectionSubscription
  extends Promise<AsyncIterator<ScheduleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ScheduleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateScheduleSubscription>() => T;
}

export interface ScheduleEdge {
  node: Schedule;
  cursor: String;
}

export interface ScheduleEdgePromise
  extends Promise<ScheduleEdge>,
    Fragmentable {
  node: <T = SchedulePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ScheduleEdgeSubscription
  extends Promise<AsyncIterator<ScheduleEdge>>,
    Fragmentable {
  node: <T = ScheduleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSchedule {
  count: Int;
}

export interface AggregateSchedulePromise
  extends Promise<AggregateSchedule>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateScheduleSubscription
  extends Promise<AsyncIterator<AggregateSchedule>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TagConnection {
  pageInfo: PageInfo;
  edges: TagEdge[];
}

export interface TagConnectionPromise
  extends Promise<TagConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TagEdge>>() => T;
  aggregate: <T = AggregateTagPromise>() => T;
}

export interface TagConnectionSubscription
  extends Promise<AsyncIterator<TagConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TagEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTagSubscription>() => T;
}

export interface TagEdge {
  node: Tag;
  cursor: String;
}

export interface TagEdgePromise extends Promise<TagEdge>, Fragmentable {
  node: <T = TagPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TagEdgeSubscription
  extends Promise<AsyncIterator<TagEdge>>,
    Fragmentable {
  node: <T = TagSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTag {
  count: Int;
}

export interface AggregateTagPromise
  extends Promise<AggregateTag>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTagSubscription
  extends Promise<AsyncIterator<AggregateTag>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface BoardSubscriptionPayload {
  mutation: MutationType;
  node: Board;
  updatedFields: String[];
  previousValues: BoardPreviousValues;
}

export interface BoardSubscriptionPayloadPromise
  extends Promise<BoardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BoardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BoardPreviousValuesPromise>() => T;
}

export interface BoardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BoardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BoardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BoardPreviousValuesSubscription>() => T;
}

export interface BoardPreviousValues {
  id: ID_Output;
  title: String;
  caption: String;
  category: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface BoardPreviousValuesPromise
  extends Promise<BoardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  category: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BoardPreviousValuesSubscription
  extends Promise<AsyncIterator<BoardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ImageSubscriptionPayload {
  mutation: MutationType;
  node: Image;
  updatedFields: String[];
  previousValues: ImagePreviousValues;
}

export interface ImageSubscriptionPayloadPromise
  extends Promise<ImageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ImagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ImagePreviousValuesPromise>() => T;
}

export interface ImageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ImageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ImageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ImagePreviousValuesSubscription>() => T;
}

export interface ImagePreviousValues {
  id: ID_Output;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ImagePreviousValuesPromise
  extends Promise<ImagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ImagePreviousValuesSubscription
  extends Promise<AsyncIterator<ImagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface InfoSubscriptionPayload {
  mutation: MutationType;
  node: Info;
  updatedFields: String[];
  previousValues: InfoPreviousValues;
}

export interface InfoSubscriptionPayloadPromise
  extends Promise<InfoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InfoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InfoPreviousValuesPromise>() => T;
}

export interface InfoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InfoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InfoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InfoPreviousValuesSubscription>() => T;
}

export interface InfoPreviousValues {
  id: ID_Output;
  title: String;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface InfoPreviousValuesPromise
  extends Promise<InfoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface InfoPreviousValuesSubscription
  extends Promise<AsyncIterator<InfoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MarketSubscriptionPayload {
  mutation: MutationType;
  node: Market;
  updatedFields: String[];
  previousValues: MarketPreviousValues;
}

export interface MarketSubscriptionPayloadPromise
  extends Promise<MarketSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MarketPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MarketPreviousValuesPromise>() => T;
}

export interface MarketSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MarketSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MarketSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MarketPreviousValuesSubscription>() => T;
}

export interface MarketPreviousValues {
  id: ID_Output;
  title: String;
  caption: String;
  status: String;
  price: String;
  thumbnail?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MarketPreviousValuesPromise
  extends Promise<MarketPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  status: () => Promise<String>;
  price: () => Promise<String>;
  thumbnail: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MarketPreviousValuesSubscription
  extends Promise<AsyncIterator<MarketPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<String>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MeetSubscriptionPayload {
  mutation: MutationType;
  node: Meet;
  updatedFields: String[];
  previousValues: MeetPreviousValues;
}

export interface MeetSubscriptionPayloadPromise
  extends Promise<MeetSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MeetPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MeetPreviousValuesPromise>() => T;
}

export interface MeetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MeetSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MeetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MeetPreviousValuesSubscription>() => T;
}

export interface MeetPreviousValues {
  id: ID_Output;
  intro: String;
  title: String;
  creator?: String;
  location?: String;
  date: String;
  time: String;
  isPublic: Boolean;
  member?: Int;
  thumbnail?: String;
  theme: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MeetPreviousValuesPromise
  extends Promise<MeetPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  intro: () => Promise<String>;
  title: () => Promise<String>;
  creator: () => Promise<String>;
  location: () => Promise<String>;
  date: () => Promise<String>;
  time: () => Promise<String>;
  isPublic: () => Promise<Boolean>;
  member: () => Promise<Int>;
  thumbnail: () => Promise<String>;
  theme: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MeetPreviousValuesSubscription
  extends Promise<AsyncIterator<MeetPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  intro: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  creator: () => Promise<AsyncIterator<String>>;
  location: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<String>>;
  time: () => Promise<AsyncIterator<String>>;
  isPublic: () => Promise<AsyncIterator<Boolean>>;
  member: () => Promise<AsyncIterator<Int>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
  theme: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface MessagePreviousValues {
  id: ID_Output;
  text: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface NoticeSubscriptionPayload {
  mutation: MutationType;
  node: Notice;
  updatedFields: String[];
  previousValues: NoticePreviousValues;
}

export interface NoticeSubscriptionPayloadPromise
  extends Promise<NoticeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NoticePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NoticePreviousValuesPromise>() => T;
}

export interface NoticeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NoticeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NoticeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NoticePreviousValuesSubscription>() => T;
}

export interface NoticePreviousValues {
  id: ID_Output;
  title: String;
  caption: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface NoticePreviousValuesPromise
  extends Promise<NoticePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface NoticePreviousValuesSubscription
  extends Promise<AsyncIterator<NoticePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RentSubscriptionPayload {
  mutation: MutationType;
  node: Rent;
  updatedFields: String[];
  previousValues: RentPreviousValues;
}

export interface RentSubscriptionPayloadPromise
  extends Promise<RentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RentPreviousValuesPromise>() => T;
}

export interface RentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RentPreviousValuesSubscription>() => T;
}

export interface RentPreviousValues {
  id: ID_Output;
  title: String;
  caption: String;
  status: String;
  size: String;
  zone: String;
  price: String;
  deposit: String;
  type: String;
  address: String;
  condition: String;
  thumbnail?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RentPreviousValuesPromise
  extends Promise<RentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  caption: () => Promise<String>;
  status: () => Promise<String>;
  size: () => Promise<String>;
  zone: () => Promise<String>;
  price: () => Promise<String>;
  deposit: () => Promise<String>;
  type: () => Promise<String>;
  address: () => Promise<String>;
  condition: () => Promise<String>;
  thumbnail: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RentPreviousValuesSubscription
  extends Promise<AsyncIterator<RentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  caption: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  size: () => Promise<AsyncIterator<String>>;
  zone: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<String>>;
  deposit: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  condition: () => Promise<AsyncIterator<String>>;
  thumbnail: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RoomSubscriptionPayload {
  mutation: MutationType;
  node: Room;
  updatedFields: String[];
  previousValues: RoomPreviousValues;
}

export interface RoomSubscriptionPayloadPromise
  extends Promise<RoomSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RoomPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RoomPreviousValuesPromise>() => T;
}

export interface RoomSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoomSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoomSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RoomPreviousValuesSubscription>() => T;
}

export interface RoomPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RoomPreviousValuesPromise
  extends Promise<RoomPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RoomPreviousValuesSubscription
  extends Promise<AsyncIterator<RoomPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ScheduleSubscriptionPayload {
  mutation: MutationType;
  node: Schedule;
  updatedFields: String[];
  previousValues: SchedulePreviousValues;
}

export interface ScheduleSubscriptionPayloadPromise
  extends Promise<ScheduleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SchedulePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SchedulePreviousValuesPromise>() => T;
}

export interface ScheduleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ScheduleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ScheduleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SchedulePreviousValuesSubscription>() => T;
}

export interface SchedulePreviousValues {
  id: ID_Output;
  date: String;
  todo: String;
  tag?: String;
  isOn: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SchedulePreviousValuesPromise
  extends Promise<SchedulePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<String>;
  todo: () => Promise<String>;
  tag: () => Promise<String>;
  isOn: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SchedulePreviousValuesSubscription
  extends Promise<AsyncIterator<SchedulePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<String>>;
  todo: () => Promise<AsyncIterator<String>>;
  tag: () => Promise<AsyncIterator<String>>;
  isOn: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TagSubscriptionPayload {
  mutation: MutationType;
  node: Tag;
  updatedFields: String[];
  previousValues: TagPreviousValues;
}

export interface TagSubscriptionPayloadPromise
  extends Promise<TagSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TagPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TagPreviousValuesPromise>() => T;
}

export interface TagSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TagSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TagSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TagPreviousValuesSubscription>() => T;
}

export interface TagPreviousValues {
  id: ID_Output;
  title: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TagPreviousValuesPromise
  extends Promise<TagPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TagPreviousValuesSubscription
  extends Promise<AsyncIterator<TagPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  avatar?: String;
  email: String;
  firstName?: String;
  lastName?: String;
  username: String;
  intro?: String;
  loginSecret?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  avatar: () => Promise<String>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  username: () => Promise<String>;
  intro: () => Promise<String>;
  loginSecret: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  avatar: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  intro: () => Promise<AsyncIterator<String>>;
  loginSecret: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Notice",
    embedded: false
  },
  {
    name: "Market",
    embedded: false
  },
  {
    name: "Rent",
    embedded: false
  },
  {
    name: "Board",
    embedded: false
  },
  {
    name: "Image",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "Room",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  },
  {
    name: "Meet",
    embedded: false
  },
  {
    name: "Tag",
    embedded: false
  },
  {
    name: "Schedule",
    embedded: false
  },
  {
    name: "Info",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
