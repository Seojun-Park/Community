import React from "react";
import styled from "styled-components";
import { Map, Marker } from "google-maps-react";

const Wrapper = styled.div`
`;

const MapContainer = styled.div`
  position: relative;
  background-size: cover;
`;

export default () => {
  const mapStyles = {
    width: "500px",
    height: "500px"
  };
  return (
    <Wrapper>
      <MapContainer>
        <Map
          google={window.google}
          style={mapStyles}
          zoom={14}
          initialCenter={{ lat: 53.347614, lng: -6.259293 }}
        />
        <Marker position={{lat: 53.347614, lng: -6.259293}} />
      </MapContainer>
    </Wrapper>
  );
};









import React, { useState, useEffect } from "react";
import styled from "styled-components";

import ReactMapGL, { NavigationControl, Marker } from "react-map-gl";
import "mapbox-gl/dist/mapbox-gl.css";
import { MAP_TOKEN } from "../../key";
import { debounce } from "@material-ui/core";
import { MarkerIcon } from "../Icon";

const Wrapper = styled.div``;

const NaviControl = styled.div`
  position: absolute;
`;

export default () => {
  const [viewport, setViewport] = useState({
    latitude: 53.347614,
    longitude: -6.259293,
    width: "30vw",
    height: "60vh",
    zoom: 12
  });

  useEffect(() => {
    const resizeEventListener = window.addEventListener(
      "resize",
      debounce(() => {
        setViewport({
          ...viewport,
          width: window.innerWidth,
          height: window.innerHeight
        });
      }, 200)
    );
    return () => {
      window.removeEventListener("resize", resizeEventListener);
    };
  }, []);

  
  return (
    <Wrapper>
      <ReactMapGL
        {...viewport}
        mapboxApiAccessToken={MAP_TOKEN}
        mapStyle="mapbox://styles/mapbox/light-v10"
        onViewportChange={setViewport}
      >
        <NaviControl>
          <NavigationControl />
        </NaviControl>
        <Marker latitude={53.347614} longitude={-6.259293}>
          <MarkerIcon />
        </Marker>
      </ReactMapGL>
    </Wrapper>
  );
};




import React, { useState } from "react";
import ReactMapGL, { SVGOverlay, NavigationControl } from "react-map-gl";
import { Editor, DrawPolygonMode } from 'react-map-gl-draw'
// import { fromJS } from 'immutable'
import { MAP_TOKEN } from "../../key";


export default () => {
  const [viewport, setViewport] = useState({
    width: 400,
    height: 400,
    latitude: 37.7577,
    longitude: -122.4376,
    zoom: 8
  });

  const redraw = ({ project }) => {
    const [cx, cy] = project([-122.4, 37.7]);
    return <circle cx={cx} cy={cy} r={4} fill="blue" />;
  };

  const goToNYC = () => {
    const viewport = { ...viewport, longitude: -74.1, latitude: 40.7 };
    setViewport(viewport);
  };

  return (
    <>
      <button onClick={goToNYC}>NYC</button>
      <ReactMapGL
        {...viewport}
        mapboxApiAccessToken={MAP_TOKEN}
        mapStyle="mapbox://styles/mapbox/light-v10"
        onViewportChange={nextViewport => setViewport(nextViewport)}
      >
        <NavigationControl />
        <SVGOverlay redraw={redraw} />
      </ReactMapGL>
    </>
  );
};


// Normal Map

// import React,{ useState } from 'react'
// import MapGL, {GeolocateControl } from 'react-map-gl'
// import { MAP_TOKEN } from '../../key'
// import 'mapbox-gl/dist/mapbox-gl.css'

// const TOKEN= MAP_TOKEN

// const geolocateStyle = {
//   float: 'left',
//   margin: '50px',
//   padding: '10px'
// };

// const Map = () => {

//   const [viewport, setViewPort ] = useState({
//     width: "80%",
//     height: 500,
//     latitude: 0,
//     longitude: 0,
//     zoom: 3
//   })

//   const _onViewportChange = viewport => setViewPort({...viewport, transitionDuration: 3000 })

//   return (
//     <div style={{ margin: '0 auto'}}>
//       <h1 style={{textAlign: 'center', fontSize: '25px', fontWeight: 'bolder' }}>GeoLocator: Click To Find Your Location or click <a href="/search">here</a> to search for a location</h1>
//       <MapGL
//         {...viewport}
//         mapboxApiAccessToken={TOKEN}
//         mapStyle="mapbox://styles/mapbox/light-v10"
//         onViewportChange={_onViewportChange}
//       >
//         <GeolocateControl
//           style={geolocateStyle}
//           positionOptions={{enableHighAccuracy: true}}
//           trackUserLocation={true}
//         />
//       </MapGL>
//     </div>
//   )
// }

// export default Map





// import React, { useState, useEffect } from 'react';
// import ReactMapGL, {
//   NavigationControl,
//   FlyToInterpolator,
//   Marker,
//   Popup
// } from 'react-map-gl'
// import 'mapbox-gl/dist/mapbox-gl.css';
// import _ from 'lodash'
// import { MarkerIcon } from '../Icon'
// import styled from 'styled-components'
// import { MAP_TOKEN } from '../../key'

// const Wrapper = styled.div`

// `;

// const StyledMap = styled(ReactMapGL)`
//       /* max-height: 500px;
//       max-width: 500px; */
//       background-size: cover;
// `;

// const NaviControl = styled.div`
//       position: absolute;
// `;

// const Button = styled.button`
//   background: none;
//   border: none;
//   :focus{
//     outline: transparent;
//   }
// `;

// // const MAP_TOKEN = 'pk.eyJ1IjoiamlucGFyazEyMyIsImEiOiJjazlyZ2xvODYwdTI1M21ydGtpOGs5N2lhIn0.Lcyu5KuC3pd0dzXlIJ-LSw'

// export default (props) => {

//   const data = props.data;
//   console.log(data);
//   const [ viewport, setViewport ] = useState({
//     latitude :53.347614,
//     longitude : -6.259293,
//     width: '30vw',
//     height:'60vh',
//     zoom: 12
//   });
//   const [ lat, setLat ] = useState(0);
//   const [ lng, setLng ] = useState(0);
//   const [ selectedStation, setSelectedStation ] = useState(null);

//   useEffect(() => {
//     const mapResizeEvent = _.throttle(()=> {
//       setViewport(Object.assign({}, {
//         ...viewport,
//         width: `${window.innerWidth}px`,
//         height: `${window.innerHeight}px`
//       }));
//     }, 2000);
//     window.addEventListener('resize', mapResizeEvent);

//     return () => {
//       window.removeEventListener('resize', mapResizeEvent);
//     }
//   }, [ viewport ]);

//   return (
//     <Wrapper>
//       <StyledMap
//         {...viewport}
//         mapboxApiAccessToken={MAP_TOKEN}
//         transitionDuration={400}
//         transitionInterpolator={new FlyToInterpolator()}
//         mapStyle="mapbox://styles/mapbox/streets-v9"
//         onViewportChange={(viewport) => {
//           setViewport(viewport);
//         }}>
//           <NaviControl>
//             <NavigationControl />
//           </NaviControl>
//           {data && data.map((d, index) => (
//             <Marker
//               key={index}
//               latitude={d.latitude}
//               longitude={d.longitude}
//               >
//                 <Button onClick={()=> {
//                   setSelectedStation(d.address)
//                   setLat(d.latitude)
//                   setLng(d.longitude)
//                 }}
//                   ><MarkerIcon /></Button>
//             </Marker>
//             ))
//             }
//             {selectedStation && (
//               <Popup
//                 offsetLeft={10}
//                 latitude={lat}
//                 longitude={lng}
//                 onClose={() => {
//                   setSelectedStation(null)
//                   setLat(0)
//                   setLng(0)
//                 }}
//                 >
//                   <div>{selectedStation}</div>
//               </Popup>
//             )}
//         </StyledMap>
//     </Wrapper>
//   )
// }






import "react-map-gl-geocoder/dist/mapbox-gl-geocoder.css";
import React, { Component } from "react";
import styled from "styled-components";
import ReactMapGL, {
  GeolocateControl,
  Marker
} from "react-map-gl";
import Geocoder from "react-map-gl-geocoder";
import { MAP_TOKEN } from "../../key";
import { MarkerIcon } from "../Icon";

const Wrapper = styled.div``;

const Content = styled.div``;

const geolocateStyle = {
  float: "left",
  margin: "60px 30px",
  padding: "10px"
};

export default class DirectionMap extends Component {
  state = {
    viewport: {
      latitude: 40.725086,
      longitude: -73.97736,
      zoom: 12
    },
    userLocation: {}
  };

  mapRef = React.createRef();
  handleViewPortChange = viewport => {
    this.setState({
      viewport: { ...this.state.viewport, ...viewport }
    });
  };

  setUserLocation = () => {
    navigator.geolocation.getCurrentPosition(p => {
      let setUserLocation = {
        lat: p.coords.latitude,
        long: p.coords.longitude
      };
      let newViewPort = {
        width: " 70vw",
        height: "100vh",
        latitude: p.coords.latitude,
        longitude: p.coords.longitude,
        zoom: 12
      };
      this.setState({
        viewport: newViewPort,
        userLocation: setUserLocation
      });
    });
  };

  render() {
    return (
      <Wrapper>
        {/* <Content>
          <button onClick={this.setUserLocation}>My location</button>
        </Content> */}
        <Content>
          <ReactMapGL
            ref={this.mapRef}
            {...this.state.viewport}
            width="70vw"
            height="100vh"
            onViewportChange={viewport => this.setState({ viewport })}
            mapStyle="mapbox://styles/mapbox/light-v10"
            mapboxApiAccessToken={MAP_TOKEN}
          >
            {/* {Object.keys(this.state.userLocation).length !== 0 ? (
              <Marker
                latitude={this.state.viewport.latitude}
                longitude={this.state.viewport.longitude}
              >
                <MarkerIcon />
              </Marker>
            ) : (
              <span>empty</span>
            )} */}
            <Geocoder
              position="top-left"
              mapRef={this.mapRef}
              mapboxApiAccessToken={MAP_TOKEN}
            />
            <GeolocateControl
              style={geolocateStyle}
              positionOptions={{ enableHighAccuracy: true }}
              trackUserLocation={true}
            />
          </ReactMapGL>
        </Content>
      </Wrapper>
    );
  }
}




import "mapbox-gl/dist/mapbox-gl.css";
import "react-map-gl-geocoder/dist/mapbox-gl-geocoder.css";
import React, { Component } from "react";
import MapGL, { GeolocateControl } from "react-map-gl";
import DeckGL, { GeoJsonLayer } from "deck.gl";
import Geocoder from "react-map-gl-geocoder";
import { MAP_TOKEN } from "../../key";

const token = MAP_TOKEN;

const geolocateStyle = {
  float: "right",
  margin: "50px",
  padding: "10px"
};
class SearchableMap extends Component {
  state = {
    viewport: {
      latitude: 53.347614,
      longitude: -6.259293,
      zoom: 12
    },
    searchResultLayer: null
  };

  mapRef = React.createRef();

  handleViewportChange = viewport => {
    this.setState({
      viewport: { ...this.state.viewport, ...viewport }
    });
  };
  // if you are happy with Geocoder default settings, you can just use handleViewportChange directly
  handleGeocoderViewportChange = viewport => {
    const geocoderDefaultOverrides = { transitionDuration: 1000 };

    return this.handleViewportChange({
      ...viewport,
      ...geocoderDefaultOverrides
    });
  };

  handleOnResult = event => {
    this.setState({
      searchResultLayer: new GeoJsonLayer({
        id: "search-result",
        data: event.result.geometry,
        getFillColor: [255, 0, 0, 128],
        getRadius: 1000,
        pointRadiusMinPixels: 10,
        pointRadiusMaxPixels: 10
      })
    });
  };

  render() {
    const { viewport, searchResultLayer } = this.state;
    return (
      <div style={{ height: "100vh" }}>
        <MapGL
          ref={this.mapRef}
          {...viewport}
          mapStyle="mapbox://styles/mapbox/streets-v9"
          width="70%"
          height="80%"
          onViewportChange={this.handleViewportChange}
          mapboxApiAccessToken={token}
        >
          <Geocoder
            mapRef={this.mapRef}
            onResult={this.handleOnResult}
            onViewportChange={this.handleGeocoderViewportChange}
            mapboxApiAccessToken={token}
            position="top-left"
          />
          <GeolocateControl
            style={geolocateStyle}
            positionOptions={{ enableHighAccuracy: true }}
            trackUserLocation={true}
          />
        </MapGL>
        <DeckGL {...viewport} layers={[searchResultLayer]} />
      </div>
    );
  }
}

export default SearchableMap;
